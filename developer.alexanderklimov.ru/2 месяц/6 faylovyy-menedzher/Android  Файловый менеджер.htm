<!DOCTYPE html>
<html><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta charset="utf-8">
<title>Android: Файловый менеджер</title>
   
<meta name="viewport" content="width=device-width, initial-scale=1.0">

<!-- Le styles -->
<link href="Android%20%20%D0%A4%D0%B0%D0%B9%D0%BB%D0%BE%D0%B2%D1%8B%D0%B9%20%D0%BC%D0%B5%D0%BD%D0%B5%D0%B4%D0%B6%D0%B5%D1%80_files/bootstrap.css" rel="stylesheet">
<style type="text/css">
  body {
    padding-top: 60px;
    padding-bottom: 10px;
  }
  .sidebar-nav {
    padding: 9px 0;
  }
</style>
	
<link href="Android%20%20%D0%A4%D0%B0%D0%B9%D0%BB%D0%BE%D0%B2%D1%8B%D0%B9%20%D0%BC%D0%B5%D0%BD%D0%B5%D0%B4%D0%B6%D0%B5%D1%80_files/bootstrap-responsive.css" rel="stylesheet">
	
   <!-- Le HTML5 shim, for IE6-8 support of HTML5 elements -->
    <!--[if lt IE 9]>
      <script src="http://html5shim.googlecode.com/svn/trunk/html5.js"></script>
    <![endif]-->

    <!-- Le fav and touch icons -->
    
<link rel="icon" href="http://developer.alexanderklimov.ru/favicon.ico" type="image/x-icon">
<link rel="shortcut icon" href="http://developer.alexanderklimov.ru/favicon.ico" type="image/x-icon">
</head>

<body>

<div class="navbar navbar-inverse navbar-fixed-top">
    <div class="navbar-inner">
        <div class="container-fluid">
        <a class="btn btn-navbar" data-toggle="collapse" data-target=".nav-collapse">
          <span class="icon-bar"></span>
          <span class="icon-bar"></span>
          <span class="icon-bar"></span>
        </a>
        
        <div class="nav-collapse collapse">
          <p class="navbar-text pull-right">
			<a data-toggle="modal" href="#myModal" class="navbar-link">Гость</a>
          </p>
		  
		  
          
		  <ul class="nav pull-right">
                    <li id="fat-menu" class="dropdown">
                      <a href="http://developer.alexanderklimov.ru/android/secret/enter.php" id="drop3" role="button">Вход <b class="caret"></b></a>
                      <ul class="dropdown-menu" role="menu" aria-labelledby="drop3">
                        
                        <li><form action="http://developer.alexanderklimov.ru/blocks/testreg.php" method="post">
						    	<fieldset id="inputs">
		                        <input class="span2" id="username" name="login" placeholder="Ваш email адрес" required="" type="email">   
		                        <input class="span1" id="password" name="password" placeholder="Пароль" required="" type="password">
	                            </fieldset>
	                            <fieldset id="actions">
		                        <input class="btn" id="submit" name="submit" value="Войти" type="submit">
		                        
	                            </fieldset>
                            </form></li>
                      </ul>
                    </li>
                  </ul>


        </div><!--/.nav-collapse -->
        </div>
    </div>
</div>

<div class="row-fluid">
    <div class="span5">
        <p>
		<a href="http://developer.alexanderklimov.ru/"><img src="Android%20%20%D0%A4%D0%B0%D0%B9%D0%BB%D0%BE%D0%B2%D1%8B%D0%B9%20%D0%BC%D0%B5%D0%BD%D0%B5%D0%B4%D0%B6%D0%B5%D1%80_files/header.png" alt="Сайт разработчика Александр Климова" border="0"></a>
		</p>
    
    </div><!--/span-->
    
	<div class="span5">
        <p style="color:green; font-style: italic; font-size: small;">
		/* Моя кошка замечательно разбирается в программировании. Стоит мне объяснить проблему ей - и все становится ясно. */<br>John Robbins, Debugging Applications, Microsoft Press, 2000
		</p>
    </div><!--/span-->
    
	<div class="span2">
        <p>
		<a href="http://feeds.feedburner.com/alexanderklimov/VJcl"><img src="Android%20%20%D0%A4%D0%B0%D0%B9%D0%BB%D0%BE%D0%B2%D1%8B%D0%B9%20%D0%BC%D0%B5%D0%BD%D0%B5%D0%B4%D0%B6%D0%B5%D1%80_files/kot-2-rss-100.png" border="0"></a>
		</p>
    </div><!--/span-->
</div><!--/row-->
	
<div class="clearfix"></div><noindex><!--Rating@Mail.ru COUNTER--><script async="" src="Android%20%20%D0%A4%D0%B0%D0%B9%D0%BB%D0%BE%D0%B2%D1%8B%D0%B9%20%D0%BC%D0%B5%D0%BD%D0%B5%D0%B4%D0%B6%D0%B5%D1%80_files/cbgapi.loaded_1"></script><script async="" src="Android%20%20%D0%A4%D0%B0%D0%B9%D0%BB%D0%BE%D0%B2%D1%8B%D0%B9%20%D0%BC%D0%B5%D0%BD%D0%B5%D0%B4%D0%B6%D0%B5%D1%80_files/cbgapi.loaded_0"></script><script gapi_processed="true" src="Android%20%20%D0%A4%D0%B0%D0%B9%D0%BB%D0%BE%D0%B2%D1%8B%D0%B9%20%D0%BC%D0%B5%D0%BD%D0%B5%D0%B4%D0%B6%D0%B5%D1%80_files/plusone.js" async="" type="text/javascript"></script><script language="JavaScript" type="text/javascript"><!--
d=document;var a='';a+=';r='+escape(d.referrer)
js=10//--></script><script language="JavaScript1.1" type="text/javascript"><!--
a+=';j='+navigator.javaEnabled()
js=11//--></script><script language="JavaScript1.2" type="text/javascript"><!--
s=screen;a+=';s='+s.width+'*'+s.height
a+=';d='+(s.colorDepth?s.colorDepth:s.pixelDepth)
js=12//--></script><script language="JavaScript1.3" type="text/javascript"><!--
js=13//--></script><script language="JavaScript" type="text/javascript"><!--
d.write('<IMG src="http://db.c7.b3.a0.top.mail.ru/counter'+
'?id=228158;js='+js+a+';rand='+Math.random()+
'" height="1" width="1" alt="top.mail.ru" border="0" />')
if(11<js)d.write('<'+'!-- ')//--></script><img src="Android%20%20%D0%A4%D0%B0%D0%B9%D0%BB%D0%BE%D0%B2%D1%8B%D0%B9%20%D0%BC%D0%B5%D0%BD%D0%B5%D0%B4%D0%B6%D0%B5%D1%80_files/counter.gif" alt="top.mail.ru" border="0" height="1" width="1"><!-- <noscript><img
src="http://db.c7.b3.a0.top.mail.ru/counter?js=na;id=228158"
height="1" width="1" alt="top.mail.ru" border="0" /></noscript><script language="JavaScript" type="text/javascript"><!--
if(11<js)d.write('--'+'>')//--><!--/COUNTER--></noindex><ul class="nav nav-pills">
<li class=""><a href="http://rusnetframework.blogspot.com/">Блог</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/index.php">C#/Visual Basic</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/windowsphone/wp.php">Windows Phone</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/wpf/wpf.php">WPF</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/php">PHP</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/silverlight/silverlight.php">Silverlight</a></li>
<li class="active"><a href="http://developer.alexanderklimov.ru/android">Android</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/arduino">Arduino</a></li>
</ul>
<div class="container-fluid">
    
    <div class="row-fluid">
        <!--левое меню -->
        <div class="span2">
            <div class="well sidebar-nav">
            <ul class="nav nav-list">
<li class="active"><a href="http://developer.alexanderklimov.ru/android/index.php">Главная</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/android/theory.php">Теория</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/android/views.php">Palette</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/android/catshop/catshop.php">Котошоп</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/android/animation.php">Анимация</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/android/sqlite/">SQLite</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/android/opengles/">OpenGL ES</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/android/library.php">Библиотеки</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/android/games.php">Игры</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/android/emulator.php">Эмулятор</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/android/tips-android.php">Советы</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/android/articles-android.php">Статьи</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/android/books.php">Книги</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/android/java/java.php">Java. Экспресс-курс</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/android/design/">Дизайн</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/android/opensource.php">Open Source</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/android/links.php">Полезные ресурсы</a></li>
</ul>            </div><!--/.well -->
        </div><!--/span-->


        <div class="span8">

        <div class="row-fluid">
            <div class="span12">
            
                        <div id="myModal" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
            <div class="modal-header">
              <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
              <h3 id="myModalLabel">Регистрация</h3>
            </div>
            <div class="modal-body">
            
<p>Полный текст статьи и исходники программы доступны только зарегистрированным участникам сайта.</p>

<p>Стоимость регистрации - символические 155 рублей.</p>

<p>Для регистрации сначала необходимо пополнить Яндекс.Кошелек - 
410011383280263 на указанную сумму (или Webmoney-кошелек R390884954122 
или QIWI - 9055113963 (кошелек, не на счёт телефона!)), а затем прислать
 письмо на адрес rusproject@mail.ru или alexander.klimoff@gmail.com с 
указанием, на какой кошелек вы делали оплату и реквизиты, по которым 
можно вас определить.</p>

<p>Не присылайте в письме мои номера кошельков - поверьте, я их знаю и без вас.</p>

<p>В ответном письме вы получите учётные данные для чтения статей из закрытой зоны за второй месяц.</p>

<p>Доступ к третьему месяцу обучения доступен только после оплаты второго месяца и составляет 155 руб.</p>

<p>Доступ к чётвертому месяцу обучения доступен после оплаты третьего месяца и составляет 155 руб. и т.д.</p>

<p>Также возможен приём на PayPal. Обратите внимание, что в этом случае стоимость одного месяца составляет 6$.</p>

<p>При оплате сразу четырех месяцев (2-5) - стоимость 600 руб.</p>

<p>Доступ даётся как минимум на один год. Для тех, кто оплатил третий и другие месяцы, сроки доступа увеличиваются.</p>

<p>
</p><form action="https://www.paypal.com/cgi-bin/webscr" method="post" target="_top">
<input name="cmd" value="_s-xclick" type="hidden">
<input name="hosted_button_id" value="VRED2NRVE927N" type="hidden">
<input src="Android%20%20%D0%A4%D0%B0%D0%B9%D0%BB%D0%BE%D0%B2%D1%8B%D0%B9%20%D0%BC%D0%B5%D0%BD%D0%B5%D0%B4%D0%B6%D0%B5%D1%80_files/btn_paynow_LG.gif" name="submit" alt="PayPal — более безопасный и легкий способ оплаты через Интернет!" border="0" type="image">
<img alt="" src="Android%20%20%D0%A4%D0%B0%D0%B9%D0%BB%D0%BE%D0%B2%D1%8B%D0%B9%20%D0%BC%D0%B5%D0%BD%D0%B5%D0%B4%D0%B6%D0%B5%D1%80_files/pixel.htm" border="0" height="1" width="1">
</form>
<p></p>			
			            
            </div>
            <div class="modal-footer">
              <button class="btn" data-dismiss="modal">Закрыть</button>
              
            </div>
          </div>
<p><a href="http://developer.alexanderklimov.ru/android/secret/secret.php?do=logout">Выйти из закрытой зоны</a></p>        
<h1 class="text-warning">Файловый менеджер</h1>

<p>
<a href="#filelist">Получение списка файлов</a><br>
<a href="#exif">Извлекаем информацию о EXIF</a><br>
<a href="#realexplorer">Файловый менеджер для реального телефона</a><br>
<a href="#filter">Фильтруем типы файлов</a><br>
</p>

<p>Попробуем написать собственный файловый менеджер для просмотра файлов на своём устройстве. В предыдущем уроке про <a href="http://developer.alexanderklimov.ru/android/filesystem.php">файловую систему</a> мы делали упор на файлах, которые относятся к самому приложению.</p>


<h2 class="text-warning" id="filelist">Получение списка файлов</h2>

<p>Для работы с общими файлами на устройстве используются стандартные функции ввода/вывода из Java (класс <b>java.io.File</b>):</p>

<pre><code class="java">
File f = new File(dirPath); 
File[] files = f.listFiles(); 
</code></pre>

<p>Существует также перегруженная версия метода <b>listFiles(FilenameFilter filter)</b>, где можно, например, указать фильтр для расширения файла, чтобы выводить только определённые типы файлов. Смотри пример <a href="#filter">Фильтруем типы файлов</a>.</p>

<p>Напишем пример просмотра файлов на устройстве.</p>

<p>Файловый менеджер будет состоять из прокручиваемого списка, а имена 
файлов и папок будем заносить в ArrayList. Если мы находимся не в 
корневой папке устройста, то добавим два элемента (корень и родительскую
 папку) в начало ArrayList, чтобы у нас была возможность быстро 
перемещаться на уровень выше.</p>

<p>Затем готовый ArrayList мы передадим в адаптер ArrayAdapter для окончательного вывода списка на экран (рис.1).</p>

<p>Элементы списка будут кликабельны. Если щелкнуть по названию файлу, 
то в диалоговом окне выводится имя файла (рис.2). Если щелкнуть по папке
 (проверка через isDirectory), то открываем её в случае доступности 
(canRead), в противном случае выводим сообщение, что папка закрыта для 
чтения (рис.3).</p>

<p>
<img src="Android%20%20%D0%A4%D0%B0%D0%B9%D0%BB%D0%BE%D0%B2%D1%8B%D0%B9%20%D0%BC%D0%B5%D0%BD%D0%B5%D0%B4%D0%B6%D0%B5%D1%80_files/fileexplorer1.png" alt="Файловый менеджер"> <img src="Android%20%20%D0%A4%D0%B0%D0%B9%D0%BB%D0%BE%D0%B2%D1%8B%D0%B9%20%D0%BC%D0%B5%D0%BD%D0%B5%D0%B4%D0%B6%D0%B5%D1%80_files/fileexplorer2.png" alt="Файловый менеджер"> <img src="Android%20%20%D0%A4%D0%B0%D0%B9%D0%BB%D0%BE%D0%B2%D1%8B%D0%B9%20%D0%BC%D0%B5%D0%BD%D0%B5%D0%B4%D0%B6%D0%B5%D1%80_files/fileexplorer3.png" alt="Файловый менеджер">
</p>

<p>Приступим к написанию программы. Добавим на форму ListView и два 
TextView. Вторая текстовая метка носит декоративный характер на случай, 
если список будет пуст.</p>

<pre><code class="xml">
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="fill_parent"
    android:layout_height="fill_parent"
    android:orientation="vertical" &gt;

    &lt;TextView
        android:id="@+id/path"
        android:layout_width="fill_parent"
        android:layout_height="wrap_content" /&gt;

    &lt;ListView
        android:id="@android:id/list"
        android:layout_width="fill_parent"
        android:layout_height="wrap_content" /&gt;

    &lt;TextView
        android:id="@android:id/empty"
        android:layout_width="fill_parent"
        android:layout_height="wrap_content"
        android:text="No Data" /&gt;

&lt;/LinearLayout&gt;
</code></pre>

<p>Создадим собственную разметку для элементов списка. Это решение вам 
пригодится, если вы захотите сделать навороченный менеджер со значками, 
подсказками и т.д. Вы сможете позже видоизменить шаблон для списка под 
свои задачи. Пока создадим в папке /res/layout файл row.xml</p>

<pre><code class="xml">
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;TextView xmlns:android="http://schemas.android.com/apk/res/android"
    android:id="@+id/rowtext"
    android:layout_width="fill_parent"
    android:layout_height="30dp"
    android:textSize="23sp" /&gt;
</code></pre>

<p>Логика работы программы в коде:</p>

<pre><code class="java">
package ru.alexanderklimov.fileexplorer;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

import android.app.AlertDialog;
import android.app.ListActivity;
import android.content.DialogInterface;
import android.os.Bundle;
import android.view.View;
import android.widget.ArrayAdapter;
import android.widget.ListView;
import android.widget.TextView;

public class FileExplorerActivity extends ListActivity {

    private List&lt;String&gt; item = null;
    private List&lt;String&gt; path = null;
    private String root = "/"; // символ для корня
    private TextView myPath;

    /** Called when the activity is first created. */
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);

        myPath = (TextView) findViewById(R.id.path); // здесь будем выводить текущее местоположение

        getDir(root); // выводим список файлов и папок в корневой папке системы
    }

    private void getDir(String dirPath) {
        myPath.setText("Location: " + dirPath); // где мы сейчас
        item = new ArrayList&lt;String&gt;();
        path = new ArrayList&lt;String&gt;();
        File f = new File(dirPath);
        File[] files = f.listFiles(); // получаем список файлов

        // если мы не в корневой папке
        if (!dirPath.equals(root)) {
            item.add(root);
            path.add(root);
            item.add("../");
            path.add(f.getParent());
        }

        // формируем список папок и файлов для передачи адаптеру
        for (int i = 0; i &lt; files.length; i++) {
            File file = files[i];
            path.add(file.getPath());
            if (file.isDirectory())
                item.add(file.getName() + "/");
            else
                item.add(file.getName());
        }

        // Все готов. Можно выводить на экран список
        ArrayAdapter&lt;String&gt; fileList = new ArrayAdapter&lt;String&gt;(this,
                R.layout.row, item);
        setListAdapter(fileList);
    }

    // обработка нажатий на элементах списка
    @Override
    protected void onListItemClick(ListView l, View v, int position, long id) {
        File file = new File(path.get(position));
        // если это папка
        if (file.isDirectory()) {
            if (file.canRead()) // если она доступна для просмотра, то заходим в неё
                getDir(path.get(position));
            else { // если папка закрыта, то сообщаем об этом
                new AlertDialog.Builder(this)
                        .setIcon(R.drawable.ic_launcher)
                        .setTitle(
                                "[" + file.getName()
                                        + "] folder can't be read!")
                        .setPositiveButton("OK",
                                new DialogInterface.OnClickListener() {
                                    @Override
                                    public void onClick(DialogInterface dialog,
                                            int which) {
                                        // TODO Auto-generated method stub
                                    }
                                }).show();
            }
        } else { // если элемент списка является файлом, то выводим его имя
            String fileinfo = "Абсолютный путь: " + file.getAbsolutePath()
                    + "\n" + "Путь: " + file.getPath() + "\n" + "Родитель: "
                    + file.getParent() + "\n" + "Имя: " + file.getName() + "\n"
                    + "Последнее изменение: " + new Date(file.lastModified());
                    
            new AlertDialog.Builder(this)
                    .setIcon(R.drawable.ic_launcher)
                    .setTitle("[" + file.getName() + "]")
                    .setMessage(fileinfo)
                    .setPositiveButton("OK",
                            new DialogInterface.OnClickListener() {
                                @Override
                                public void onClick(DialogInterface dialog,
                                        int which) {
                                    // TODO Auto-generated method stub
                                }
                            }).show();
        }
    }
}
</code></pre>

<p>Запустите проект и просмотрите внутренности вашей файловой системы.</p>

<h2 class="text-warning" id="exif">Извлекаем информацию о EXIF</h2>

<p>Фотографии, сделанные камерой устройства, содержат различную 
информацию о снимке, которая записывается в специальный формат EXIF в 
самом файле.</p>

<p>Формат EXIF предназначен для хранения различного рода метаданных, 
включая дату и время, свойства камеры (марку и модель), настройки 
изображения (апертуру и выдержку), а также описание снимка и информацию о
 местоположении.</p>

<p>Класс <b>ExifInterface</b> предоставляет механизм для чтения и изменения данных EXIF (Exchangeable Image File Format) внутри файла в формате 
JPEG. Создайте новый экземпляр этого класса, передав в его конструктор полное имя файла.</p>

<pre><code class="java">
ExifInterface exif = new ExifInterface(filename);
</code></pre>

<p>Чтобы прочитать определенный атрибут из метаданных EXIF, вызовите метод <b>getAttribute()</b>
 из объекта ExifInterface, передав ему имя нужного 
атрибута. Класс Exifinterface содержит статические константы вида TAG_*,
 которые можно использовать для доступа к стандартным данным EXIF.</p>

<p>Чтобы изменить метаданные, примените метод <b>setAttribute()</b>, передав ему в качестве параметров имя атрибута и соответствующее значение.</p>

<p>Расширим функциональность файлового менеджера и при щелчке на файле с
 расширением JPG будем выводить не только стандартную информацию о 
файле, но и EXIF-информацию:</p>

<pre><code class="java">
...
} else {

    String exifAttribute = null;
    String filename = file.getName();
    String ext = filename.substring(filename.lastIndexOf('.') + 1,
            filename.length());

    if (ext.equals("JPG") || ext.equals("jpg")) {
        try {
            ExifInterface exif = new ExifInterface(file.toString());
            exifAttribute = getExif(exif);
        } catch (IOException e) {
            // TODO Auto-generated catch block
            ;
        }
    }

    String fileinfo = "Абсолютный путь: " + file.getAbsolutePath()
    ...
    .setMessage(fileinfo  + "
" + exifAttribute) // информация о файле и EXIF, если JPG

private String getExif(ExifInterface exif) {
    String myAttribute = null;
    myAttribute += getTagString(ExifInterface.TAG_DATETIME, exif);
    myAttribute += getTagString(ExifInterface.TAG_FLASH, exif);
    myAttribute += getTagString(ExifInterface.TAG_GPS_LATITUDE, exif);
    myAttribute += getTagString(ExifInterface.TAG_GPS_LATITUDE_REF, exif);
    myAttribute += getTagString(ExifInterface.TAG_GPS_LONGITUDE, exif);
    myAttribute += getTagString(ExifInterface.TAG_GPS_LONGITUDE_REF, exif);
    myAttribute += getTagString(ExifInterface.TAG_IMAGE_LENGTH, exif);
    myAttribute += getTagString(ExifInterface.TAG_IMAGE_WIDTH, exif);
    myAttribute += getTagString(ExifInterface.TAG_MAKE, exif);
    myAttribute += getTagString(ExifInterface.TAG_MODEL, exif);
    myAttribute += getTagString(ExifInterface.TAG_ORIENTATION, exif);
    myAttribute += getTagString(ExifInterface.TAG_WHITE_BALANCE, exif);
    return myAttribute;
}

private String getTagString(String tag, ExifInterface exif) {
    return (tag + " : " + exif.getAttribute(tag) + "
");
}
</code></pre>

<p><img src="Android%20%20%D0%A4%D0%B0%D0%B9%D0%BB%D0%BE%D0%B2%D1%8B%D0%B9%20%D0%BC%D0%B5%D0%BD%D0%B5%D0%B4%D0%B6%D0%B5%D1%80_files/fileexplorer4.png" alt="Файловый менеджер"></p>

<p>На скриншоте показана информация о фотографии с моего телефона. Так 
как у меня стоит запрет на получении информации о моём местонахождении, 
то часть тегов, связанных с GPS-координатами, содержит пустые данные. Но
 при этом можно определить производителя, модель телефона и другую 
информацию.</p>

<h2 class="text-warning" id="realexplorer">Файловый менеджер для реального телефона</h2>

<p>На самом деле созданный нами файловый менеджер годится для эмулятора и
 рутованных устройств. В обычных телефонах нет доступа к системным 
папками и файлам. Поэтому следует переписать проект, который будет 
работаь в реальных условиях.</p>

<p>Во-первых, нужно изменить корневой элемент для исходной точки. Вместо
 корня "/" будем использовать папку внешнего хранилища, которую можно 
получить через метод <b>Environment.getExternalStorageDirectory()</b>. А скрытые или недоступные для чтения каталоги не будем выводим в списке.</p>

<pre><code class="java">
package ru.alexanderklimov.fileexplorer;

import ...

public class FileExplorerActivity extends ListActivity {

    private List&lt;String&gt; item = null;
    private List&lt;String&gt; path = null;
    private TextView myPath;
    // private String root = "/";
    private String root;

    /** Called when the activity is first created. */
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);

        myPath = (TextView) findViewById(R.id.path);
        // путь внешнего хранилища
        root = Environment.getExternalStorageDirectory().getPath();

        getDir(root);
    }

    private void getDir(String dirPath) {
        myPath.setText("Location: " + dirPath);
        item = new ArrayList<string>();
        path = new ArrayList<string>();
        File f = new File(dirPath);
        File[] files = f.listFiles();

        if (!dirPath.equals(root)) {
            item.add(root);
            path.add(root);
            item.add("../");
            path.add(f.getParent());
        }

        for (int i = 0; i &lt; files.length; i++) {
            File file = files[i];

            // path.add(file.getPath());
            // if (file.isDirectory())
            // item.add(file.getName() + "/");
            // else
            // item.add(file.getName());

            // Работаем только с доступными папками и файлами
            if (!file.isHidden() &amp;&amp; file.canRead()) {
                path.add(file.getPath());
                if (file.isDirectory()) {
                    item.add(file.getName() + "/");
                } else {
                    item.add(file.getName());
                }
            }
        }

        ArrayAdapter<string> fileList = new ArrayAdapter<string>(this,
                R.layout.row, item);
        setListAdapter(fileList);
    }

    @Override
    protected void onListItemClick(ListView l, View v, int position, long id) {
        File file = new File(path.get(position));

        if (file.isDirectory()) {
            if (file.canRead()) {
                getDir(path.get(position));
            } else {
                new AlertDialog.Builder(this)
                        .setIcon(R.drawable.ic_launcher)
                        .setTitle(
                                "[" + file.getName()
                                        + "] folder can't be read!")
                        .setPositiveButton("OK", null).show();
            }
        } else {

            String exifAttribute = null;
            String filename = file.getName();
            String ext = filename.substring(filename.lastIndexOf('.') + 1,
                    filename.length());

            if (ext.equals("JPG") || ext.equals("jpg")) {
                try {
                    ExifInterface exif = new ExifInterface(file.toString());
                    exifAttribute = getExif(exif);
                } catch (IOException e) {
                    // TODO Auto-generated catch block
                    ;
                }
            }

            String fileinfo = "Абсолютный путь: " + file.getAbsolutePath()
                    + "\n" + "Путь: " + file.getPath() + "\n" + "Родитель: "
                    + file.getParent() + "\n" + "Имя: " + file.getName() + "\n"
                    + "Последнее изменение: " + new Date(file.lastModified());

            new AlertDialog.Builder(this).setIcon(R.drawable.ic_launcher)
                    .setTitle("[" + file.getName() + "]")
                    .setMessage(fileinfo + "\n" + exifAttribute)
                    // информация о файле и EXIF, если JPG
                    .setPositiveButton("OK", null).show();

        }
    }

    private String getExif(ExifInterface exif) {
        String myAttribute = null;
        myAttribute += getTagString(ExifInterface.TAG_DATETIME, exif);
        myAttribute += getTagString(ExifInterface.TAG_FLASH, exif);
        myAttribute += getTagString(ExifInterface.TAG_GPS_LATITUDE, exif);
        myAttribute += getTagString(ExifInterface.TAG_GPS_LATITUDE_REF, exif);
        myAttribute += getTagString(ExifInterface.TAG_GPS_LONGITUDE, exif);
        myAttribute += getTagString(ExifInterface.TAG_GPS_LONGITUDE_REF, exif);
        myAttribute += getTagString(ExifInterface.TAG_IMAGE_LENGTH, exif);
        myAttribute += getTagString(ExifInterface.TAG_IMAGE_WIDTH, exif);
        myAttribute += getTagString(ExifInterface.TAG_MAKE, exif);
        myAttribute += getTagString(ExifInterface.TAG_MODEL, exif);
        myAttribute += getTagString(ExifInterface.TAG_ORIENTATION, exif);
        myAttribute += getTagString(ExifInterface.TAG_WHITE_BALANCE, exif);
        return myAttribute;
    }

    private String getTagString(String tag, ExifInterface exif) {
        return (tag + " : " + exif.getAttribute(tag) + "
");
    }
}
</string></string></string></string></code></pre>

<h3 class="text-warning">Сортировка по имени или по дате изменения</h3>

<p>Приложение получилось вполне рабочим, но есть один недостаток - имена
 папок и файлов выводятся не в алфавитном порядке. При большом 
количестве файлов это может стать головной болью для пользователя.</p>

<p>Решение очень простое. У класса <b>Array</b> есть метод <b>sort()</b>, позволяющий сортировать элементы массива с использованием интерфейса Comparator. Необходимо реализовать интерфейс <b>Comparator</b>, в котором имена файлов приводим в нижний регистр.</p>

<p>В методе <b>getDir()</b> добавляем одну строчку кода и добавляем новый блок кода для интерфейса.</p>

<pre><code class="java">
private void getDir(String dirPath) {
    myPath.setText("Location: " + dirPath);
    item = new ArrayList&lt;String&gt;();
    path = new ArrayList&lt;String&gt;();
    File f = new File(dirPath);
    File[] files = f.listFiles();

    if (!dirPath.equals(root)) {
        item.add(root);
        path.add(root);
        item.add("../");
        path.add(f.getParent());
    }

    Arrays.sort(files, filecomparator);

    for (int i = 0; i &lt; files.length; i++) {
        File file = files[i];

        // Работаем только с доступными папками и файлами
        if (!file.isHidden() &amp;&amp; file.canRead()) {
            path.add(file.getPath());
            if (file.isDirectory()) {
                item.add(file.getName() + "/");
            } else {
                item.add(file.getName());
            }
        }
    }

    ArrayAdapter<string> fileList = new ArrayAdapter<string>(this,
            R.layout.row, item);
    setListAdapter(fileList);
}

Comparator&lt;? super File&gt; filecomparator = new Comparator&lt;File&gt;() {

    public int compare(File file1, File file2) {

        if (file1.isDirectory()) {
            if (file2.isDirectory()) {
                return String.valueOf(file1.getName().toLowerCase())
                        .compareTo(file2.getName().toLowerCase());
            } else {
                return -1;
            }
        } else {
            if (file2.isDirectory()) {
                return 1;
            } else {
                return String.valueOf(file1.getName().toLowerCase())
                        .compareTo(file2.getName().toLowerCase());
            }
        }
    }
};
</string></string></code></pre>

<p>Теперь все папки и файлы будут выводится в алфавитном порядке.</p>

<p>Если хочется выводить список файлов по дате изменения, то следует реализовать другой интерфейс:</p>

<pre><code class="java">
Comparator&lt;? super File&gt; filecomparatorByLastModified = new Comparator&lt;File&gt;() {
    public int compare(File file1, File file2) {

        if (file1.isDirectory()) {
            if (file2.isDirectory()) {
                return Long.valueOf(file1.lastModified()).compareTo(
                        file2.lastModified());
            } else {
                return -1;
            }
        } else {
            if (file2.isDirectory()) {
                return 1;
            } else {
                return Long.valueOf(file1.lastModified()).compareTo(
                        file2.lastModified());
            }
        }
    }
};
</code></pre>

<p>Чтобы переключаться между двумя способоми сортировки, добавим две кнопки в основную разметку:</p>

<pre><code class="xml">
&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical" &gt;

    &lt;LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="horizontal" &gt;

        &lt;Button
            android:id="@+id/button_alphabetically"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:text="По алфавиту"
            android:textSize="16sp" /&gt;

        &lt;Button
            android:id="@+id/button_lastDateModified"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:text="По дате изм."
            android:textSize="16sp" /&gt;
    &lt;/LinearLayout&gt;

    &lt;TextView
        android:id="@+id/path"
        android:layout_width="fill_parent"
        android:layout_height="wrap_content" /&gt;

    &lt;ListView
        android:id="@android:id/list"
        android:layout_width="fill_parent"
        android:layout_height="wrap_content" /&gt;

    &lt;TextView
        android:id="@android:id/empty"
        android:layout_width="fill_parent"
        android:layout_height="wrap_content"
        android:text="No Data" /&gt;

&lt;/LinearLayout&gt;
</code></pre>

<p>Внесём косметические изменения в коде. Окончательный код приложения:</p>

<pre><code class="java">
package ru.alexanderklimov.fileexplorer;

import java.io.File;
import java.io.IOException;
import java.sql.Date;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;

import android.app.AlertDialog;
import android.app.ListActivity;
import android.media.ExifInterface;
import android.os.Bundle;
import android.os.Environment;
import android.view.View;
import android.widget.ArrayAdapter;
import android.widget.ListView;
import android.widget.TextView;

public class FileExplorerActivity extends ListActivity {

    private List&lt;String&gt; item = null;
    private List&lt;String&gt; path = null;
    private TextView myPath;
    private String root;

    private String currentPath;
    Comparator&lt;? super File&gt; comparator;

    /** Called when the activity is first created. */
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);

        myPath = (TextView) findViewById(R.id.path);

        comparator = filecomparatorByAlphabetically;

        // путь внешнего хранилища
        root = Environment.getExternalStorageDirectory().getPath();

        getDir(root);
    }

    private void getDir(String dirPath) {
        currentPath = dirPath;

        myPath.setText("Location: " + dirPath);
        item = new ArrayList&lt;String&gt;();
        path = new ArrayList&lt;String&gt;();
        File f = new File(dirPath);
        File[] files = f.listFiles();

        if (!dirPath.equals(root)) {
            item.add(root);
            path.add(root);
            item.add("../");
            path.add(f.getParent());
        }

        // Arrays.sort(files, filecomparator);
        Arrays.sort(files, comparator);

        for (int i = 0; i &lt; files.length; i++) {
            File file = files[i];

            // Работаем только с доступными папками и файлами
            if (!file.isHidden() &amp;&amp; file.canRead()) {
                path.add(file.getPath());
                if (file.isDirectory()) {
                    item.add(file.getName() + "/");
                } else {
                    item.add(file.getName());
                }
            }
        }

        ArrayAdapter&lt;String&gt; fileList = new ArrayAdapter&lt;String&gt;(this,
                R.layout.row, item);
        setListAdapter(fileList);
    }

    Comparator&lt;? super File&gt; filecomparatorByAlphabetically = new Comparator&lt;File&gt;() {
        public int compare(File file1, File file2) {
            if (file1.isDirectory()) {
                if (file2.isDirectory()) {
                    return String.valueOf(file1.getName().toLowerCase())
                            .compareTo(file2.getName().toLowerCase());
                } else {
                    return -1;
                }
            } else {
                if (file2.isDirectory()) {
                    return 1;
                } else {
                    return String.valueOf(file1.getName().toLowerCase())
                            .compareTo(file2.getName().toLowerCase());
                }
            }
        }
    };

    Comparator&lt;? super File&gt; filecomparatorByLastModified = new Comparator&lt;File&gt;() {
        public int compare(File file1, File file2) {
            if (file1.isDirectory()) {
                if (file2.isDirectory()) {
                    return Long.valueOf(file1.lastModified()).compareTo(
                            file2.lastModified());
                } else {
                    return -1;
                }
            } else {
                if (file2.isDirectory()) {
                    return 1;
                } else {
                    return Long.valueOf(file1.lastModified()).compareTo(
                            file2.lastModified());
                }
            }
        }
    };

    @Override
    protected void onListItemClick(ListView l, View v, int position, long id) {
        File file = new File(path.get(position));

        if (file.isDirectory()) {
            if (file.canRead()) {
                getDir(path.get(position));
            } else {
                new AlertDialog.Builder(this)
                        .setIcon(R.drawable.ic_launcher)
                        .setTitle(
                                "[" + file.getName()
                                        + "] folder can't be read!")
                        .setPositiveButton("OK", null).show();
            }
        } else {

            String exifAttribute = null;
            String filename = file.getName();
            String ext = filename.substring(filename.lastIndexOf('.') + 1,
                    filename.length());

            if (ext.equals("JPG") || ext.equals("jpg")) {
                try {
                    ExifInterface exif = new ExifInterface(file.toString());
                    exifAttribute = getExif(exif);
                } catch (IOException e) {
                    // TODO Auto-generated catch block
                    ;
                }
            }

            String fileinfo = "Абсолютный путь: " + file.getAbsolutePath()
                    + "\n" + "Путь: " + file.getPath() + "\n" + "Родитель: "
                    + file.getParent() + "\n" + "Имя: " + file.getName() + "\n"
                    + "Последнее изменение: " + new Date(file.lastModified());

            new AlertDialog.Builder(this).setIcon(R.drawable.ic_launcher)
                    .setTitle("[" + file.getName() + "]")
                    .setMessage(fileinfo + "\n" + exifAttribute)
                    // информация о файле и EXIF, если JPG
                    .setPositiveButton("OK", null).show();

        }
    }

    private String getExif(ExifInterface exif) {
        String myAttribute = null;
        myAttribute += getTagString(ExifInterface.TAG_DATETIME, exif);
        myAttribute += getTagString(ExifInterface.TAG_FLASH, exif);
        myAttribute += getTagString(ExifInterface.TAG_GPS_LATITUDE, exif);
        myAttribute += getTagString(ExifInterface.TAG_GPS_LATITUDE_REF, exif);
        myAttribute += getTagString(ExifInterface.TAG_GPS_LONGITUDE, exif);
        myAttribute += getTagString(ExifInterface.TAG_GPS_LONGITUDE_REF, exif);
        myAttribute += getTagString(ExifInterface.TAG_IMAGE_LENGTH, exif);
        myAttribute += getTagString(ExifInterface.TAG_IMAGE_WIDTH, exif);
        myAttribute += getTagString(ExifInterface.TAG_MAKE, exif);
        myAttribute += getTagString(ExifInterface.TAG_MODEL, exif);
        myAttribute += getTagString(ExifInterface.TAG_ORIENTATION, exif);
        myAttribute += getTagString(ExifInterface.TAG_WHITE_BALANCE, exif);
        return myAttribute;
    }

    private String getTagString(String tag, ExifInterface exif) {
        return (tag + " : " + exif.getAttribute(tag) + "
");
    }

    public void onAlphabetClick(View v) {
        comparator = filecomparatorByAlphabetically;
        getDir(currentPath);
    }

    public void onDateModClick(View v) {
        comparator = filecomparatorByLastModified;
        getDir(currentPath);
    }
}
</code></pre>

<p><img src="Android%20%20%D0%A4%D0%B0%D0%B9%D0%BB%D0%BE%D0%B2%D1%8B%D0%B9%20%D0%BC%D0%B5%D0%BD%D0%B5%D0%B4%D0%B6%D0%B5%D1%80_files/fileexplorer5.png" alt="File Explorer" height="400" width="240"></p>

<p>Идея примера (с небольшими изменениями): <a href="http://android-er.blogspot.ru/2012/09/file-explorer-with-sorting-in.html">File Explorer with sorting, in alphabetical and lastModified</a> и другие.</p>

<h2 class="text-warning" id="filter">Фильтруем типы файлов</h2>

<p>Рассмотрим простейший пример вывода списка файлов определённого формата на SD-карте. Добавьте в разметку компонент TextView.</p>

<pre><code class="java">
package ru.alexanderklimov.filter;

import ...

public class MainActivity extends Activity {
    
    File root;
    File[] fileArray;
    
    /** Called when the activity is first created. */
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        
        setContentView(R.layout.activity_main);
        
        TextView textInfo = (TextView) findViewById(R.id.textView1);
        
        root = new File(Environment.getExternalStorageDirectory()
                .getAbsolutePath());
        fileArray = root.listFiles(new FilenameFilter() {
            @Override
            public boolean accept(File dir, String filename) {
                return filename.toLowerCase().endsWith(".jpg");
            }
        });
        // сначала выводим путь к SD-карте
        String f = root.getAbsolutePath() + "\n\n";
        // затем список файлов с расширением JPG
        for (int i = 0; i &lt; fileArray.length; i++) {
            f += fileArray[i].getName() + "\n";
        }
        textInfo.setText(f);
    }
}
</code></pre>

<p><img src="Android%20%20%D0%A4%D0%B0%D0%B9%D0%BB%D0%BE%D0%B2%D1%8B%D0%B9%20%D0%BC%D0%B5%D0%BD%D0%B5%D0%B4%D0%B6%D0%B5%D1%80_files/fileexplorer6.png" alt="File Explorer" height="129" width="300"></p>



</div><!--/span-->
        </div><!--/row-->    
          
        </div><!--/span-->
        
        <div class="span2">
            <div class="well sidebar-nav">
    <h4><span class="label label-info">Реклама</span></h4>
    <script type="text/javascript"><!--
    google_ad_client = "pub-4224968932772057";
    /* 120x600AlexKlimov */
    google_ad_slot = "0305552138";
    google_ad_width = 120;
    google_ad_height = 600;
    //-->
    </script>
    <script type="text/javascript" src="Android%20%20%D0%A4%D0%B0%D0%B9%D0%BB%D0%BE%D0%B2%D1%8B%D0%B9%20%D0%BC%D0%B5%D0%BD%D0%B5%D0%B4%D0%B6%D0%B5%D1%80_files/show_ads.js">
    </script>
</div><!--/.well -->        </div><!--/span-->
        
      </div><!--/row-->
      
    
      <hr>
      
	  	  <div class="row-fluid">
	  <div class="span12">
	  <img src="Android%20%20%D0%A4%D0%B0%D0%B9%D0%BB%D0%BE%D0%B2%D1%8B%D0%B9%20%D0%BC%D0%B5%D0%BD%D0%B5%D0%B4%D0%B6%D0%B5%D1%80_files/cat_bottom.png" align="right">
</div><!--/span-->
        </div><!--/row-->

<footer>
    <noindex>
    <span style="float:left; margin:3px 1px 1px 2px;">
	    © 2013 <a href="mailto:rusproject@mail.ru">А.Климов</a>
		
		<!-- Place this code where you want the badge to render. -->
<a href="http://plus.google.com/109061106977829925124?prsrc=3" rel="publisher" style="text-decoration:none;">
<img src="Android%20%20%D0%A4%D0%B0%D0%B9%D0%BB%D0%BE%D0%B2%D1%8B%D0%B9%20%D0%BC%D0%B5%D0%BD%D0%B5%D0%B4%D0%B6%D0%B5%D1%80_files/gplus-16.png" alt="Google+" style="border:0;width:16px;height:16px;"></a>

    </span>
	
		<span style="float: right; margin:3px 5px 1px 1px; font-size:22px;">
        <!--Rating@Mail.ru LOGO--><a target="_top" href="http://top.mail.ru/jump?from=228158"><img src="Android%20%20%D0%A4%D0%B0%D0%B9%D0%BB%D0%BE%D0%B2%D1%8B%D0%B9%20%D0%BC%D0%B5%D0%BD%D0%B5%D0%B4%D0%B6%D0%B5%D1%80_files/counter_002.gif" alt="Рейтинг@Mail.ru" border="0" height="31" width="88"></a><!--/LOGO-->
	</span>
    
    <span style="float: right; margin:2px 70px 1px 1px; font-size:22px;">
        <a href="http://feeds.feedburner.com/alexanderklimov/VJcl"><img src="Android%20%20%D0%A4%D0%B0%D0%B9%D0%BB%D0%BE%D0%B2%D1%8B%D0%B9%20%D0%BC%D0%B5%D0%BD%D0%B5%D0%B4%D0%B6%D0%B5%D1%80_files/VJcl.gif" style="border:0" alt="" height="26" width="88"></a>
	</span>
	
<div style="float: right; margin:2px 70px 1px 1px;">
<!-- Place this tag where you want the +1 button to render. -->
<div id="___plusone_0" style="text-indent: 0px; margin: 0px; padding: 0px; background: none repeat scroll 0% 0% transparent; border-style: none; float: none; line-height: normal; font-size: 1px; vertical-align: baseline; display: inline-block; width: 300px; height: 15px;"><iframe title="+1" data-gapiattached="true" src="Android%20%20%D0%A4%D0%B0%D0%B9%D0%BB%D0%BE%D0%B2%D1%8B%D0%B9%20%D0%BC%D0%B5%D0%BD%D0%B5%D0%B4%D0%B6%D0%B5%D1%80_files/fastbutton.htm" name="I0_1378022373163" id="I0_1378022373163" vspace="0" tabindex="0" style="position: static; top: 0px; width: 300px; margin: 0px; border-style: none; left: 0px; visibility: visible; height: 15px;" marginwidth="0" marginheight="0" hspace="0" frameborder="0" scrolling="no" width="100%"></iframe></div>

</div>

<!-- Place this tag after the last +1 button tag. -->
<script type="text/javascript">
  window.___gcfg = {lang: 'ru'};

  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
	

    </noindex>
</footer>

</div><iframe style="width: 1px; height: 1px; position: absolute; left: -100px;" src="Android%20%20%D0%A4%D0%B0%D0%B9%D0%BB%D0%BE%D0%B2%D1%8B%D0%B9%20%D0%BC%D0%B5%D0%BD%D0%B5%D0%B4%D0%B6%D0%B5%D1%80_files/postmessageRelay.htm" id="oauth2relay535653647" name="oauth2relay535653647"></iframe><!--/.fluid-container-->    <!-- Le javascript
    ================================================== -->
    <!-- Placed at the end of the document so the pages load faster -->
    <script src="Android%20%20%D0%A4%D0%B0%D0%B9%D0%BB%D0%BE%D0%B2%D1%8B%D0%B9%20%D0%BC%D0%B5%D0%BD%D0%B5%D0%B4%D0%B6%D0%B5%D1%80_files/jquery.js"></script>
    <script src="Android%20%20%D0%A4%D0%B0%D0%B9%D0%BB%D0%BE%D0%B2%D1%8B%D0%B9%20%D0%BC%D0%B5%D0%BD%D0%B5%D0%B4%D0%B6%D0%B5%D1%80_files/bootstrap-transition.js"></script>
    <script src="Android%20%20%D0%A4%D0%B0%D0%B9%D0%BB%D0%BE%D0%B2%D1%8B%D0%B9%20%D0%BC%D0%B5%D0%BD%D0%B5%D0%B4%D0%B6%D0%B5%D1%80_files/bootstrap-alert.js"></script>
    <script src="Android%20%20%D0%A4%D0%B0%D0%B9%D0%BB%D0%BE%D0%B2%D1%8B%D0%B9%20%D0%BC%D0%B5%D0%BD%D0%B5%D0%B4%D0%B6%D0%B5%D1%80_files/bootstrap-modal.js"></script>
    <script src="Android%20%20%D0%A4%D0%B0%D0%B9%D0%BB%D0%BE%D0%B2%D1%8B%D0%B9%20%D0%BC%D0%B5%D0%BD%D0%B5%D0%B4%D0%B6%D0%B5%D1%80_files/bootstrap-dropdown.js"></script>
    <script src="Android%20%20%D0%A4%D0%B0%D0%B9%D0%BB%D0%BE%D0%B2%D1%8B%D0%B9%20%D0%BC%D0%B5%D0%BD%D0%B5%D0%B4%D0%B6%D0%B5%D1%80_files/bootstrap-scrollspy.js"></script>
    <script src="Android%20%20%D0%A4%D0%B0%D0%B9%D0%BB%D0%BE%D0%B2%D1%8B%D0%B9%20%D0%BC%D0%B5%D0%BD%D0%B5%D0%B4%D0%B6%D0%B5%D1%80_files/bootstrap-tab.js"></script>
    <script src="Android%20%20%D0%A4%D0%B0%D0%B9%D0%BB%D0%BE%D0%B2%D1%8B%D0%B9%20%D0%BC%D0%B5%D0%BD%D0%B5%D0%B4%D0%B6%D0%B5%D1%80_files/bootstrap-tooltip.js"></script>
    <script src="Android%20%20%D0%A4%D0%B0%D0%B9%D0%BB%D0%BE%D0%B2%D1%8B%D0%B9%20%D0%BC%D0%B5%D0%BD%D0%B5%D0%B4%D0%B6%D0%B5%D1%80_files/bootstrap-popover.js"></script>
    <script src="Android%20%20%D0%A4%D0%B0%D0%B9%D0%BB%D0%BE%D0%B2%D1%8B%D0%B9%20%D0%BC%D0%B5%D0%BD%D0%B5%D0%B4%D0%B6%D0%B5%D1%80_files/bootstrap-button.js"></script>
    <script src="Android%20%20%D0%A4%D0%B0%D0%B9%D0%BB%D0%BE%D0%B2%D1%8B%D0%B9%20%D0%BC%D0%B5%D0%BD%D0%B5%D0%B4%D0%B6%D0%B5%D1%80_files/bootstrap-collapse.js"></script>
    <script src="Android%20%20%D0%A4%D0%B0%D0%B9%D0%BB%D0%BE%D0%B2%D1%8B%D0%B9%20%D0%BC%D0%B5%D0%BD%D0%B5%D0%B4%D0%B6%D0%B5%D1%80_files/bootstrap-carousel.js"></script>
    <script src="Android%20%20%D0%A4%D0%B0%D0%B9%D0%BB%D0%BE%D0%B2%D1%8B%D0%B9%20%D0%BC%D0%B5%D0%BD%D0%B5%D0%B4%D0%B6%D0%B5%D1%80_files/bootstrap-typeahead.js"></script>

</body></html>