<!DOCTYPE html>
<html><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta charset="utf-8">
<title>Android: Создаём собственный элемент View</title>
   
<meta name="viewport" content="width=device-width, initial-scale=1.0">

<!-- Le styles -->
<link href="Android%20%20%D0%A1%D0%BE%D0%B7%D0%B4%D0%B0%D1%91%D0%BC%20%D1%81%D0%BE%D0%B1%D1%81%D1%82%D0%B2%D0%B5%D0%BD%D0%BD%D1%8B%D0%B9%20%D1%8D%D0%BB%D0%B5%D0%BC%D0%B5%D0%BD%D1%82%20View_files/bootstrap.css" rel="stylesheet">
<style type="text/css">
  body {
    padding-top: 60px;
    padding-bottom: 10px;
  }
  .sidebar-nav {
    padding: 9px 0;
  }
</style>
	
<link href="Android%20%20%D0%A1%D0%BE%D0%B7%D0%B4%D0%B0%D1%91%D0%BC%20%D1%81%D0%BE%D0%B1%D1%81%D1%82%D0%B2%D0%B5%D0%BD%D0%BD%D1%8B%D0%B9%20%D1%8D%D0%BB%D0%B5%D0%BC%D0%B5%D0%BD%D1%82%20View_files/bootstrap-responsive.css" rel="stylesheet">
	
   <!-- Le HTML5 shim, for IE6-8 support of HTML5 elements -->
    <!--[if lt IE 9]>
      <script src="http://html5shim.googlecode.com/svn/trunk/html5.js"></script>
    <![endif]-->

    <!-- Le fav and touch icons -->
    
<link rel="icon" href="http://developer.alexanderklimov.ru/favicon.ico" type="image/x-icon">
<link rel="shortcut icon" href="http://developer.alexanderklimov.ru/favicon.ico" type="image/x-icon">
</head>

<body>

<div class="navbar navbar-inverse navbar-fixed-top">
    <div class="navbar-inner">
        <div class="container-fluid">
        <a class="btn btn-navbar" data-toggle="collapse" data-target=".nav-collapse">
          <span class="icon-bar"></span>
          <span class="icon-bar"></span>
          <span class="icon-bar"></span>
        </a>
        
        <div class="nav-collapse collapse">
          <p class="navbar-text pull-right">
			<a data-toggle="modal" href="#myModal" class="navbar-link">Гость</a>
          </p>
		  
		  
          
		  <ul class="nav pull-right">
                    <li id="fat-menu" class="dropdown">
                      <a href="http://developer.alexanderklimov.ru/android/secret/enter.php" id="drop3" role="button">Вход <b class="caret"></b></a>
                      <ul class="dropdown-menu" role="menu" aria-labelledby="drop3">
                        
                        <li><form action="http://developer.alexanderklimov.ru/blocks/testreg.php" method="post">
						    	<fieldset id="inputs">
		                        <input class="span2" id="username" name="login" placeholder="Ваш email адрес" required="" type="email">   
		                        <input class="span1" id="password" name="password" placeholder="Пароль" required="" type="password">
	                            </fieldset>
	                            <fieldset id="actions">
		                        <input class="btn" id="submit" name="submit" value="Войти" type="submit">
		                        
	                            </fieldset>
                            </form></li>
                      </ul>
                    </li>
                  </ul>


        </div><!--/.nav-collapse -->
        </div>
    </div>
</div>

<div class="row-fluid">
    <div class="span5">
        <p>
		<a href="http://developer.alexanderklimov.ru/"><img src="Android%20%20%D0%A1%D0%BE%D0%B7%D0%B4%D0%B0%D1%91%D0%BC%20%D1%81%D0%BE%D0%B1%D1%81%D1%82%D0%B2%D0%B5%D0%BD%D0%BD%D1%8B%D0%B9%20%D1%8D%D0%BB%D0%B5%D0%BC%D0%B5%D0%BD%D1%82%20View_files/header.png" alt="Сайт разработчика Александр Климова" border="0"></a>
		</p>
    
    </div><!--/span-->
    
	<div class="span5">
        <p style="color:green; font-style: italic; font-size: small;">
		/* Моя кошка замечательно разбирается в программировании. Стоит мне объяснить проблему ей - и все становится ясно. */<br>John Robbins, Debugging Applications, Microsoft Press, 2000
		</p>
    </div><!--/span-->
    
	<div class="span2">
        <p>
		<a href="http://feeds.feedburner.com/alexanderklimov/VJcl"><img src="Android%20%20%D0%A1%D0%BE%D0%B7%D0%B4%D0%B0%D1%91%D0%BC%20%D1%81%D0%BE%D0%B1%D1%81%D1%82%D0%B2%D0%B5%D0%BD%D0%BD%D1%8B%D0%B9%20%D1%8D%D0%BB%D0%B5%D0%BC%D0%B5%D0%BD%D1%82%20View_files/kot-2-rss-100.png" border="0"></a>
		</p>
    </div><!--/span-->
</div><!--/row-->
	
<div class="clearfix"></div><noindex><!--Rating@Mail.ru COUNTER--><script async="" src="Android%20%20%D0%A1%D0%BE%D0%B7%D0%B4%D0%B0%D1%91%D0%BC%20%D1%81%D0%BE%D0%B1%D1%81%D1%82%D0%B2%D0%B5%D0%BD%D0%BD%D1%8B%D0%B9%20%D1%8D%D0%BB%D0%B5%D0%BC%D0%B5%D0%BD%D1%82%20View_files/cbgapi.loaded_1"></script><script async="" src="Android%20%20%D0%A1%D0%BE%D0%B7%D0%B4%D0%B0%D1%91%D0%BC%20%D1%81%D0%BE%D0%B1%D1%81%D1%82%D0%B2%D0%B5%D0%BD%D0%BD%D1%8B%D0%B9%20%D1%8D%D0%BB%D0%B5%D0%BC%D0%B5%D0%BD%D1%82%20View_files/cbgapi.loaded_0"></script><script gapi_processed="true" src="Android%20%20%D0%A1%D0%BE%D0%B7%D0%B4%D0%B0%D1%91%D0%BC%20%D1%81%D0%BE%D0%B1%D1%81%D1%82%D0%B2%D0%B5%D0%BD%D0%BD%D1%8B%D0%B9%20%D1%8D%D0%BB%D0%B5%D0%BC%D0%B5%D0%BD%D1%82%20View_files/plusone.js" async="" type="text/javascript"></script><script language="JavaScript" type="text/javascript"><!--
d=document;var a='';a+=';r='+escape(d.referrer)
js=10//--></script><script language="JavaScript1.1" type="text/javascript"><!--
a+=';j='+navigator.javaEnabled()
js=11//--></script><script language="JavaScript1.2" type="text/javascript"><!--
s=screen;a+=';s='+s.width+'*'+s.height
a+=';d='+(s.colorDepth?s.colorDepth:s.pixelDepth)
js=12//--></script><script language="JavaScript1.3" type="text/javascript"><!--
js=13//--></script><script language="JavaScript" type="text/javascript"><!--
d.write('<IMG src="http://db.c7.b3.a0.top.mail.ru/counter'+
'?id=228158;js='+js+a+';rand='+Math.random()+
'" height="1" width="1" alt="top.mail.ru" border="0" />')
if(11<js)d.write('<'+'!-- ')//--></script><img src="Android%20%20%D0%A1%D0%BE%D0%B7%D0%B4%D0%B0%D1%91%D0%BC%20%D1%81%D0%BE%D0%B1%D1%81%D1%82%D0%B2%D0%B5%D0%BD%D0%BD%D1%8B%D0%B9%20%D1%8D%D0%BB%D0%B5%D0%BC%D0%B5%D0%BD%D1%82%20View_files/counter.gif" alt="top.mail.ru" border="0" height="1" width="1"><!-- <noscript><img
src="http://db.c7.b3.a0.top.mail.ru/counter?js=na;id=228158"
height="1" width="1" alt="top.mail.ru" border="0" /></noscript><script language="JavaScript" type="text/javascript"><!--
if(11<js)d.write('--'+'>')//--><!--/COUNTER--></noindex><ul class="nav nav-pills">
<li class=""><a href="http://rusnetframework.blogspot.com/">Блог</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/index.php">C#/Visual Basic</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/windowsphone/wp.php">Windows Phone</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/wpf/wpf.php">WPF</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/php">PHP</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/silverlight/silverlight.php">Silverlight</a></li>
<li class="active"><a href="http://developer.alexanderklimov.ru/android">Android</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/arduino">Arduino</a></li>
</ul>
<div class="container-fluid">
    
	<div class="row-fluid">
        <!--левое меню -->
		<div class="span2">
            <div class="well sidebar-nav">
            <ul class="nav nav-list">
<li class="active"><a href="http://developer.alexanderklimov.ru/android/index.php">Главная</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/android/theory.php">Теория</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/android/views.php">Palette</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/android/catshop/catshop.php">Котошоп</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/android/animation.php">Анимация</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/android/sqlite/">SQLite</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/android/opengles/">OpenGL ES</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/android/library.php">Библиотеки</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/android/games.php">Игры</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/android/emulator.php">Эмулятор</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/android/tips-android.php">Советы</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/android/articles-android.php">Статьи</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/android/books.php">Книги</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/android/java/java.php">Java. Экспресс-курс</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/android/design/">Дизайн</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/android/opensource.php">Open Source</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/android/links.php">Полезные ресурсы</a></li>
</ul>            </div><!--/.well -->
        </div><!--/span-->


        <div class="span8">

		<div class="row-fluid">
            <div class="span12">
			
			            <div id="myModal" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
            <div class="modal-header">
              <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
              <h3 id="myModalLabel">Регистрация</h3>
            </div>
            <div class="modal-body">
            
<p>Полный текст статьи и исходники программы доступны только зарегистрированным участникам сайта.</p>

<p>Стоимость регистрации - символические 155 рублей.</p>

<p>Для регистрации сначала необходимо пополнить Яндекс.Кошелек - 
410011383280263 на указанную сумму (или Webmoney-кошелек R390884954122 
или QIWI - 9055113963 (кошелек, не на счёт телефона!)), а затем прислать
 письмо на адрес rusproject@mail.ru или alexander.klimoff@gmail.com с 
указанием, на какой кошелек вы делали оплату и реквизиты, по которым 
можно вас определить.</p>

<p>Не присылайте в письме мои номера кошельков - поверьте, я их знаю и без вас.</p>

<p>В ответном письме вы получите учётные данные для чтения статей из закрытой зоны за второй месяц.</p>

<p>Доступ к третьему месяцу обучения доступен только после оплаты второго месяца и составляет 155 руб.</p>

<p>Доступ к чётвертому месяцу обучения доступен после оплаты третьего месяца и составляет 155 руб. и т.д.</p>

<p>Также возможен приём на PayPal. Обратите внимание, что в этом случае стоимость одного месяца составляет 6$.</p>

<p>При оплате сразу четырех месяцев (2-5) - стоимость 600 руб.</p>

<p>Доступ даётся как минимум на один год. Для тех, кто оплатил третий и другие месяцы, сроки доступа увеличиваются.</p>

<p>
</p><form action="https://www.paypal.com/cgi-bin/webscr" method="post" target="_top">
<input name="cmd" value="_s-xclick" type="hidden">
<input name="hosted_button_id" value="VRED2NRVE927N" type="hidden">
<input src="Android%20%20%D0%A1%D0%BE%D0%B7%D0%B4%D0%B0%D1%91%D0%BC%20%D1%81%D0%BE%D0%B1%D1%81%D1%82%D0%B2%D0%B5%D0%BD%D0%BD%D1%8B%D0%B9%20%D1%8D%D0%BB%D0%B5%D0%BC%D0%B5%D0%BD%D1%82%20View_files/btn_paynow_LG.gif" name="submit" alt="PayPal — более безопасный и легкий способ оплаты через Интернет!" border="0" type="image">
<img alt="" src="Android%20%20%D0%A1%D0%BE%D0%B7%D0%B4%D0%B0%D1%91%D0%BC%20%D1%81%D0%BE%D0%B1%D1%81%D1%82%D0%B2%D0%B5%D0%BD%D0%BD%D1%8B%D0%B9%20%D1%8D%D0%BB%D0%B5%D0%BC%D0%B5%D0%BD%D1%82%20View_files/pixel.htm" border="0" height="1" width="1">
</form>
<p></p>			
			            
            </div>
            <div class="modal-footer">
              <button class="btn" data-dismiss="modal">Закрыть</button>
              
            </div>
          </div>
<p><a href="http://developer.alexanderklimov.ru/android/secret/secret.php?do=logout">Выйти из закрытой зоны</a></p>
<h1 class="text-warning">Создаём собственный элемент View</h1>



<p>
<a href="#aboutview">Общие сведения о классе View</a><br>
<a href="#notusable">Бесполезный пример - Сумашедший прямоугольник</a><br>
<a href="#cirlceview">Создаем элемент Круг</a><br>
<a href="#drawmycirlce">Рисуем круг от руки</a><br>
<a href="#usable">Полезный пример - Блокнотный лист</a><br>
</p>

<p>Если вы заглянете в папку <b>Custom &amp; Library Views</b>, то ничего там не увидете. А вот у меня там есть несколько видов:</p>

<p><img src="Android%20%20%D0%A1%D0%BE%D0%B7%D0%B4%D0%B0%D1%91%D0%BC%20%D1%81%D0%BE%D0%B1%D1%81%D1%82%D0%B2%D0%B5%D0%BD%D0%BD%D1%8B%D0%B9%20%D1%8D%D0%BB%D0%B5%D0%BC%D0%B5%D0%BD%D1%82%20View_files/customview4.png" alt="Custom Views"></p>

<p>Почему такая несправедливость? Дело в том, что я написал несколько 
собственных элементов и среда разработки при сканировании проекта 
автоматически обнаруживает созданные новые элементы и размещает их в 
своей папке. И теперь я могу спокойно перетаскивать их на форму 
приложения, как обычно мы делаем со стандартными элементами. Цель данной
 статьи - научить вас создавать свои новые элементы.</p>

<p>Мы с удовольствием используем кнопки, флажки, переключатели и другие 
элементы управления, написанные умными дядями. Но, иногда нам требуется 
нечто особенное, что еще не придумали до нас. Например, до сих пор нет 
элемента, у которого есть усы, лапы, хвост. Вам остаётся самому написать
 такой элемент, обладающий уникальными методами и свойствами - при 
нажатии он будет мяукать, а при движении пальца слева направо - 
мурлыкать. Что-то мне напоминает такой элемент, никак не пойму, что 
именно.</p>


<h2 class="text-warning" id="aboutview">Общие сведения о классе View</h2>

<p>Базовый класс View — это пустая область экрана размером 100 x 100 
пикселей. Если нужно изменить размер элемента и сделать так, чтобы он 
выводил на экран более привлекательный графический интерфейс, необходимо
 переопределить методы <b>onMeasure()</b> и <b>onDraw()</b>. Внутри 
метода onMeasure() новое представление вычисляет высоту и ширину 
области, которую оно будет занимать, исходя из заданных условий. В 
методе onDraw() происходит рисование на объекте Canvas.</p>

<h2 class="text-warning" id="notusable">Бесполезный пример</h2>

<p>А мы попробуем сейчас создать пока что-то совсем простое и бессмысленное, чтобы понять общий принцип.</p>

<p>По сути, элемент управления является классом. Поэтому нам нужно 
создать собственный класс, который хранится в java-файле. Идём в меню <b>File | New | Class</b> и создаём новый класс под именем <b>MyWidgetView</b>.
 У вас появится заготовка для нового файла. Обратите внимание, что если 
мы обычно наследовались от класса Activity для создания новой 
активности, то на этот раз мы наследуемся от класса View:</p>

<pre><code class="java">
package ru.alexanderklimov.customviewdemo;

import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.util.AttributeSet;

import android.view.View;

public class MyWidgetView extends View {

	final int MIN_WIDTH = 300;
	final int MIN_HEIGHT = 150;
	final int DEFAULT_COLOR = Color.WHITE;
	int _color;
	final int STROKE_WIDTH = 2;

	public MyWidgetView(Context context) {
		super(context);
		// TODO Auto-generated constructor stub
		init();
	}

	public MyWidgetView(Context context, AttributeSet attrs) {
		super(context, attrs);
		// TODO Auto-generated constructor stub
		init();
	}

	public MyWidgetView(Context context, AttributeSet attrs, int defStyle) {
		super(context, attrs, defStyle);
		// TODO Auto-generated constructor stub
		init();
	}

	private void init() {
		setMinimumWidth(MIN_WIDTH);
		setMinimumHeight(MIN_HEIGHT);
		_color = DEFAULT_COLOR;
	}

	@Override
	protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
		// TODO Auto-generated method stub
		super.onMeasure(getSuggestedMinimumWidth(), getSuggestedMinimumHeight());
	}

	@Override
	protected void onDraw(Canvas canvas) {
		// TODO Auto-generated method stub
		Paint paint = new Paint();
		paint.setColor(_color);
		paint.setStrokeWidth(STROKE_WIDTH);
		canvas.drawRect(5, 5, getWidth() - 5, getHeight() - 5, paint);
	}

	public void setColor(int color) {
		_color = color;
	}
}
</code></pre>

<p>В этом коде мы имеем несколько конструкторов, в которых запускается метод <b>init()</b>.
 Сам метод определяет минимальные размеры элемента и цвет по умолчанию. 
Другие методы задают размеры, цвет и рисование элемента на экране.</p>

<p>Теперь неоходимо прописать созданный виджет в xml-файле, который 
отвечает за компоновку приложения. Откроем стандартный файл main.xml из 
папки res/layout и добавим наш созданный элемент. Впрочем, мелочиться не
 будем, сразу добавим три экземпляра:</p>

<pre><code class="xml">
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="fill_parent"
    android:layout_height="fill_parent"
    android:orientation="vertical" &gt;

    &lt;TextView
        android:layout_width="fill_parent"
        android:layout_height="wrap_content"
        android:text="@string/hello" /&gt;

    &lt;ru.alexanderklimov.customviewdemo.MyWidgetView
        android:id="@+id/mywidget_01"
        android:layout_width="fill_parent"
        android:layout_height="wrap_content"
        android:layout_margin="5dp" /&gt;

    &lt;ru.alexanderklimov.customviewdemo.MyWidgetView
        android:id="@+id/mywidget_02"
        android:layout_width="50dp"
        android:layout_height="50dp"
        android:layout_margin="5dp" /&gt;

    &lt;ru.alexanderklimov.customviewdemo.MyWidgetView
        android:id="@+id/mywidget_03"
        android:layout_width="50dp"
        android:layout_height="50dp"
        android:layout_margin="5dp" /&gt;

&lt;/LinearLayout&gt;
</code></pre>

<p>Если переключиться в графическое представление, то можно увидеть три белых прямоугольника.</p>

<p>Теперь попробуем программно задействовать наши элементы:</p>

<pre><code class="java">
package ru.alexanderklimov.customviewdemo;

import android.app.Activity;
import android.graphics.Color;
import android.os.Bundle;

public class CustomViewDemoActivity extends Activity {
	
	MyWidgetView myWidget_01, myWidget_02, myWidget_03;
	
    /** Called when the activity is first created. */
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);
        
        myWidget_01 = (MyWidgetView)findViewById(R.id.mywidget_01);
        myWidget_02 = (MyWidgetView)findViewById(R.id.mywidget_02);
        myWidget_03 = (MyWidgetView)findViewById(R.id.mywidget_03);
        
        myWidget_02.setColor(Color.RED);
        myWidget_03.setBackgroundColor(Color.GREEN);
        myWidget_03.setColor(Color.BLUE);
    }
}
</code></pre>

<p><img src="Android%20%20%D0%A1%D0%BE%D0%B7%D0%B4%D0%B0%D1%91%D0%BC%20%D1%81%D0%BE%D0%B1%D1%81%D1%82%D0%B2%D0%B5%D0%BD%D0%BD%D1%8B%D0%B9%20%D1%8D%D0%BB%D0%B5%D0%BC%D0%B5%D0%BD%D1%82%20View_files/customview.png" alt="Custom View"></p>

<p>Если вам понравилась идея с цветными прямоугольниками, то назовите 
свой класс CrazyColorRectangle и перешлите его в Google. Может они 
включат ваш виджет в стандартный набор элементов Android. Удачи!</p>

<h2 class="text-warning">Добавляем текст</h2>

<p>Мне самому понравилась идея с названием нового элемента, поэтому я 
решил добавить ещё и текст на разработанный View. Изменим код для метода
 <b>onDraw()</b>:</p>

<pre><code class="java">
@Override
protected void onDraw(Canvas canvas) {
	// TODO Auto-generated method stub
	Paint paint = new Paint();
	paint.setColor(_color);
	paint.setStrokeWidth(STROKE_WIDTH);
	canvas.drawRect(5, 5, getWidth() - 5, getHeight() - 5, paint);

	// Сумасшедший текст
	Path path;
	path = new Path();
	paint.setColor(Color.GRAY); // цвет для текста
	paint.setTextSize(20); // размер для текста
	path.addArc(new RectF(22, 22, getWidth() - 22, getHeight() - 22), 180,
			90);
	canvas.drawTextOnPath("Сумасшедший", path, 0, 0, paint); // текст вдоль заданного пути
	path = new Path();
	path.addArc(new RectF(22, 22, getWidth() - 22, getHeight() - 22), 0, 120);
	canvas.drawTextOnPath("прямоугольник", path, 0, 0, paint);
}
</code></pre>

<p><img src="Android%20%20%D0%A1%D0%BE%D0%B7%D0%B4%D0%B0%D1%91%D0%BC%20%D1%81%D0%BE%D0%B1%D1%81%D1%82%D0%B2%D0%B5%D0%BD%D0%BD%D1%8B%D0%B9%20%D1%8D%D0%BB%D0%B5%D0%BC%D0%B5%D0%BD%D1%82%20View_files/customview2.png" alt="Custom View"></p>

<h2 class="text-warning" id="cirlceview">Создаем элемент Круг</h2>

<p>Естественно, вы можете не ограничивать себя в фантазиях и создавать 
собственные элементы на любой вкус. Допустим мы хотим создать новый 
элемент Круг. Работаем по такому же принципу. Создаем новый класс 
CircleView и копируем практически тот же самый код с небольшими 
изменениями, касающиеся рисования круга:</p>

<pre><code class="java">
package ru.alexanderklimov.customviewdemo;

import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.util.AttributeSet;
import android.view.View;

public class CircleView extends View {
	
	final int MIN_WIDTH = 100;
	final int MIN_HEIGHT = 100;
	final int DEFAULT_COLOR = Color.RED;
	int _color;
	final int STROKE_WIDTH = 2;

	public CircleView(Context context) {
		super(context);
		// TODO Auto-generated constructor stub
		init();
	}
	
	public CircleView(Context context, AttributeSet attrs) {
		super(context, attrs);
		// TODO Auto-generated constructor stub
		init();
	}

	public CircleView(Context context, AttributeSet attrs, int defStyle) {
		super(context, attrs, defStyle);
		// TODO Auto-generated constructor stub
		init();
	}
	
	private void init() {
		setMinimumWidth(MIN_WIDTH);
		setMinimumHeight(MIN_HEIGHT);
		_color = DEFAULT_COLOR;
	}
	
	@Override
	protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
		// TODO Auto-generated method stub
		super.onMeasure(getSuggestedMinimumWidth(), getSuggestedMinimumHeight());
	}

	@Override
	protected void onDraw(Canvas canvas) {
		// TODO Auto-generated method stub
		super.onDraw(canvas);
		
		int width = getWidth();
		int height = getHeight();
		int radius;

		if (width &gt; height) {
			radius = height / 2;
		} else {
			radius = width / 2;
		}

		Paint paint = new Paint();
		paint.setStyle(Paint.Style.FILL);
		paint.setAntiAlias(true);


		paint.setColor(_color);
		canvas.drawCircle(width / 2, height / 2, radius, paint);
	}
	
	public void setColor(int color) {
		_color = color;
	}
}
</code></pre>

<p>По умолчанию круг будет залит красным цветом, но с помощью метода <b>setColor()</b> мы сможем указывать свои цвета.</p>

<p>Размещаем три созданных элемента на экране и устанавливаем у второго и третьего круга жёлтый и зелёный цвет.</p>

<pre><code class="java">
package ru.alexanderklimov.customviewdemo;

import android.app.Activity;
import android.graphics.Color;
import android.os.Bundle;

public class CustomViewDemoActivity extends Activity {
	
	CircleView circleRed, circleYellow, circleGreen;
	
    /** Called when the activity is first created. */
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);
        
        circleRed = (CircleView)findViewById(R.id.circleView1);
        circleYellow = (CircleView)findViewById(R.id.circleView2);
        circleGreen = (CircleView)findViewById(R.id.circleView3);
        
        circleYellow.setColor(Color.YELLOW);
        circleGreen.setColor(Color.GREEN);
    }
}
</code></pre>

<p>Запускаем проект и любуемся светофором.</p>

<p><img src="Android%20%20%D0%A1%D0%BE%D0%B7%D0%B4%D0%B0%D1%91%D0%BC%20%D1%81%D0%BE%D0%B1%D1%81%D1%82%D0%B2%D0%B5%D0%BD%D0%BD%D1%8B%D0%B9%20%D1%8D%D0%BB%D0%B5%D0%BC%D0%B5%D0%BD%D1%82%20View_files/customview3.png" alt="Custom View"></p>

<h2 class="text-warning" id="drawmycirlce">Рисуем круг от руки</h2>

<p>В предыдущем примере мы рисовали круг программно с заданными 
характеристиками через метод onDraw(). Если хочется интерактивности, то 
нужно отслеживать касания рукой/лапой. Ниже будут даны ссылки на новые 
элементы, которые используют данный приём. Пока же мы чуть усложним 
пример с кругом. Основное отличие - добавляем метод onTouchEvent(), в 
котором динамически вычисляем координаты лапы при движении от начала 
движения до конца. Зная координаты, мы можем вычислить расстояние между 
двумя этими точками по теореме Пифагора, которое послужит нам радиусом. 
Полученные значения передаём в метод onDraw() для рисования круга.</p>

<p>Класс TouchCircle</p>

<pre><code class="java">
package ru.alexanderklimov.customviewdemo;

import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.util.AttributeSet;
import android.view.MotionEvent;
import android.view.View;

public class TouchCircle extends View {

	private Paint paint = new Paint(Paint.ANTI_ALIAS_FLAG);

	private float initX, initY, radius;
	private boolean drawing = false;

	final int STROKE_WIDTH = 3;
	final int DEFAULT_COLOR = Color.RED;
	int _color;

	public TouchCircle(Context context, AttributeSet attrs, int defStyle) {
		super(context, attrs, defStyle);
		// TODO Auto-generated constructor stub
		init();
	}

	public TouchCircle(Context context, AttributeSet attrs) {
		super(context, attrs);
		// TODO Auto-generated constructor stub
		init();
	}

	public TouchCircle(Context context) {
		super(context);
		// TODO Auto-generated constructor stub
		init();
	}

	private void init() {
		_color = DEFAULT_COLOR;
		// выберите один из двух вариантов
		// paint.setStyle(Paint.Style.STROKE); // обводка круга - окружность
		paint.setStyle(Paint.Style.FILL); // или залить круг цветом
		paint.setStrokeWidth(STROKE_WIDTH);
		paint.setColor(_color);
	}

	@Override
	protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
		// TODO Auto-generated method stub
		setMeasuredDimension(MeasureSpec.getSize(widthMeasureSpec),
				MeasureSpec.getSize(heightMeasureSpec));
	}

	@Override
	protected void onDraw(Canvas canvas) {
		// TODO Auto-generated method stub
		if (drawing) {
			canvas.drawCircle(initX, initY, radius, paint);
		}
	}

	@Override
	public boolean onTouchEvent(MotionEvent event) {
		// TODO Auto-generated method stub

		int action = event.getAction();
		if (action == MotionEvent.ACTION_MOVE) {
			float x = event.getX();
			float y = event.getY();

			radius = (float) Math.sqrt(Math.pow(x - initX, 2)
					+ Math.pow(y - initY, 2));

		} else if (action == MotionEvent.ACTION_DOWN) {
			initX = event.getX();
			initY = event.getY();
			radius = 1;
			drawing = true;
		} else if (action == MotionEvent.ACTION_UP) {
			drawing = false;
		}
		invalidate();
		return true;
	}
}
</code></pre>

<p>Вы можете выбрать один из двух вариантов - залить круг цветом или 
оставить только обводку, чтобы получить окружность. Раскомментируйте 
нужную строчку.</p>

<p>Далее размещаем элемент на экране в своей разметке и пробуем провести
 пальцем по экрану. Во время движения на экране будет рисовать круг или 
окружность.</p>

<p>Как вариант, вы можете не размещать элемент в разметке, а объявить 
его программно. В этом случае файл main.xml вам вообще не понадобится. 
Это вам для общего развития.</p>

<pre><code class="java">
//setContentView(R.layout.main);

TouchCircle myView = new TouchCircle(this);
setContentView(myView);
</code></pre>

<p>Скриншот приводить не буду, так как рисунок не передаст процесс рисования круга в реальном времени.</p>

<p>В разделе <b>Виджеты</b> в категории <b>Custom &amp; Library Views</b> вы можете увидеть три статьи, связанные с созданием интерактивных элементов:</p>

<p><a href="http://developer.alexanderklimov.ru/android/views/singletouchview.php">SingleTouchView</a> (Закрытая зона/4-й месяц)</p>
<p><a href="http://developer.alexanderklimov.ru/android/views/doubletouchview.php">DoubleTouchView</a> (Закрытая зона/4-й месяц)</p>
<p><a href="http://developer.alexanderklimov.ru/android/views/multitouchview.php">MultiTouchView</a> (Закрытая зона/4-й месяц)</p>

<h2 id="usable">Полезный пример - Блокнотный лист</h2>

<p>Теперь рассмотрим пример создания ListView, который будет иметь вид 
блокнотного листа. Сам список для своих пунктов использует элемент 
TextView. Поэтому нам нужно переопределить внешний вид текстовой метки и
 подключить её к списку.</p>

<p>В новом проекте NotepadListView создадим класс NotesListViewItemView,
 который наследует TextView. Добавьте заглушку для переопределения 
метода onDraw(), реализуйте конструкторы, в которых вызывается новый 
метод-заглушка init().</p>

<pre><code class="java">
package ru.alexanderklimov.notepadlistview;

import android.content.Context;
import android.graphics.Canvas;
import android.util.AttributeSet;
import android.widget.TextView;

public class NotesListViewItemView extends TextView {

	public NotesListViewItemView(Context context) {
		super(context);
		// TODO Auto-generated constructor stub
		init();
	}

	public NotesListViewItemView(Context context, AttributeSet attrs) {
		super(context, attrs);
		init();
	}

	public NotesListViewItemView(Context context, AttributeSet ats, int ds) {
		super(context, ats, ds);
		init();
	}

	private void init() {
	}

	@Override
	public void onDraw(Canvas canvas) {
		// Используйте родительский класс TextView для вывода текста.
		super.onDraw(canvas);
	}
}
</code></pre>

<p>Создайте новый ресурс colors.xml в каталоге  res/values. Добавьте 
значения, описывающие цвета бумаги, кромки страницы, линии и текста.</p>

<pre><code class="xml">
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;resources&gt;

    &lt;color name="notepad_paper"&gt;#AAFFFF99&lt;/color&gt;
    &lt;color name="notepad_lines"&gt;#FF0000FF&lt;/color&gt;
    &lt;color name="notepad_margin"&gt;#90FF0000&lt;/color&gt;
    &lt;color name="notepad_text"&gt;#AA0000FF&lt;/color&gt;

&lt;/resources&gt;
</code></pre>

<p>Создайте новый файл dimens.xml и добавьте в него значение, описывающее ширину кромки страницы.</p>

<pre><code class="xml">
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;resources&gt;

    &lt;dimen name="notepad_margin"&gt;30dp&lt;/dimen&gt;

&lt;/resources&gt;
</code></pre>

<p>Возвращаемся к классу NotesListViewItemView. Создайте новые приватные
 поля для хранения объектов Paint, которые вы будете использовать при 
рисовании 
фона и кромки бумажного листа. Также создайте поля для цвета листа и 
ширины кромки. Наполните кодом метод init, добавив в него создание 
объектов Paint 
и получение экземпляров созданных ресурсов.</p>

<pre><code class="java">
private Paint marginPaint;
private Paint linePaint;
private int paperColor;
private float margin;

private void init() {
	// Получите ссылку на таблицу ресурсов.
	Resources myResources = getResources();
	// Создайте кисти для рисования, которые мы будем использовать в методе onDraw.
	marginPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
	marginPaint.setColor(myResources.getColor(R.color.notepad_margin));
	linePaint = new Paint(Paint.ANTI_ALIAS_FLAG);
	linePaint.setColor(myResources.getColor(R.color.notepad_lines));
	// Получите цвет фона для листа и ширину кромки.
	paperColor = myResources.getColor(R.color.notepad_paper);
	margin = myResources.getDimension(R.dimen.notepad_margin);
}
</code></pre>

<p>Чтобы отобразить лист, переопределите метод onDraw и нарисуйте 
изображение, используя объекты Paint. Вызовите метод onDraw из 
родительского класса и позвольте ему нарисовать текст, как он это обычно
 делает.</p>

<pre><code class="java">
@Override
public void onDraw(Canvas canvas) {
	// Фоновый цвет для листа
	canvas.drawColor(paperColor);
	// Нарисуйте направляющие линии
	canvas.drawLine(0, 0, getMeasuredHeight(), 0, linePaint);
	canvas.drawLine(0, getMeasuredHeight(), getMeasuredWidth(),
			getMeasuredHeight(), linePaint);
	// Нарисуйте кромку
	canvas.drawLine(margin, 0, margin, getMeasuredHeight(), marginPaint);
	// Переместите текст в сторону от кромки
	canvas.save();
	canvas.translate(margin, 0);
	// Используйте TextView для вывода текста.
	super.onDraw(canvas);
	canvas.restore();
}
</code></pre>

<p>На этом реализация класса NotesListItemView завершена. Чтобы 
использовать ее внутри активности, необходимо добавить созданный элемент
 в новую разметку, после чего передать эту разметку в конструктор 
объекта ArrayAdapter.</p>

<p>Начнём с создания нового ресурса notes_list_item.xml в каталоге 
res/layout. В нём содержится описание, каким образом должен отображаться
 каждый 
элемент списка. В данном примере разметка должна состоять из 
единственного элемента NotesListItemView, заполняющего все доступное 
пространство.</p>

<pre><code class="xml">
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;ru.alexanderklimov.notepadlistview.NotesListItemView xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="fill_parent"
    android:layout_height="fill_parent"
    android:fadingEdge="vertical"
    android:padding="10dp"
    android:scrollbars="vertical"
    android:textColor="@color/notepad_text" /&gt;
</code></pre>

<p>Вот, пожалуй, и всё. В основной активности добавляем ListView. Теперь
 откройте класс основной активности. Обычно для ListView мы используем 
стандартный ресурс android.R.layout.simple_list_item_1. Чтобы подключить
 блокнотный вид разметки, необходимо изменить параметры, передаваемые в 
ArrayAdapter внутри метода onCreate. Вместо ссылки, указывающей на 
стандартный ресурс, вставьте ссылку на новую разметку 
R.layout.notes_list_item, созданную нами ранее.</p>

<pre><code class="java">
package ru.alexanderklimov.notepadlistview;

import android.os.Bundle;
import android.app.Activity;
import android.view.Menu;
import android.widget.ArrayAdapter;
import android.widget.ListView;

public class MainActivity extends Activity {

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);

		ListView notelist = (ListView) findViewById(R.id.listView1);

		// определяем массив типа String
		final String[] catnames = new String[] { "Рыжик", "Барсик", "Мурзик",
				"Мурка", "Васька", "Томасина", "Кристина", "Пушок", "Дымка",
				"Кузя", "Китти", "Масяня", "Симба" };
		
		// используем адаптер данных
		ArrayAdapter&lt;String&gt; adapter = new ArrayAdapter&lt;String&gt;(this,	R.layout.notes_list_item, catnames);

		notelist.setAdapter(adapter);
	}
}
</code></pre>

<img src="Android%20%20%D0%A1%D0%BE%D0%B7%D0%B4%D0%B0%D1%91%D0%BC%20%D1%81%D0%BE%D0%B1%D1%81%D1%82%D0%B2%D0%B5%D0%BD%D0%BD%D1%8B%D0%B9%20%D1%8D%D0%BB%D0%B5%D0%BC%D0%B5%D0%BD%D1%82%20View_files/noteslistview.png" alt="ListView  в виде блокнота">


<h2 class="text-warning">Использованные материалы</h2>

<p><a href="http://android-er.blogspot.com/2011/08/example-of-custom-widget-view.html">Android-er: A example of custom widget view</a></p>
<p>Книга Р.Майера <a href="http://www.ozon.ru/context/detail/id/6752687/?partner=visual">Android 2. Программирование приложений для планшетных компьютеров и смартфонов</a></p>

</div><!--/span-->
        </div><!--/row-->	
		  
        </div><!--/span-->
		
		<div class="span2">
            <div class="well sidebar-nav">
    <h4><span class="label label-info">Реклама</span></h4>
    <script type="text/javascript"><!--
    google_ad_client = "pub-4224968932772057";
    /* 120x600AlexKlimov */
    google_ad_slot = "0305552138";
    google_ad_width = 120;
    google_ad_height = 600;
    //-->
    </script>
    <script type="text/javascript" src="Android%20%20%D0%A1%D0%BE%D0%B7%D0%B4%D0%B0%D1%91%D0%BC%20%D1%81%D0%BE%D0%B1%D1%81%D1%82%D0%B2%D0%B5%D0%BD%D0%BD%D1%8B%D0%B9%20%D1%8D%D0%BB%D0%B5%D0%BC%D0%B5%D0%BD%D1%82%20View_files/show_ads.js">
    </script>
</div><!--/.well -->        </div><!--/span-->
		
      </div><!--/row-->
	  
	
      <hr>
	  
	  	  <div class="row-fluid">
	  <div class="span12">
	  <img src="Android%20%20%D0%A1%D0%BE%D0%B7%D0%B4%D0%B0%D1%91%D0%BC%20%D1%81%D0%BE%D0%B1%D1%81%D1%82%D0%B2%D0%B5%D0%BD%D0%BD%D1%8B%D0%B9%20%D1%8D%D0%BB%D0%B5%D0%BC%D0%B5%D0%BD%D1%82%20View_files/cat_bottom.png" align="right">
</div><!--/span-->
        </div><!--/row-->

<footer>
    <noindex>
    <span style="float:left; margin:3px 1px 1px 2px;">
	    © 2013 <a href="mailto:rusproject@mail.ru">А.Климов</a>
		
		<!-- Place this code where you want the badge to render. -->
<a href="http://plus.google.com/109061106977829925124?prsrc=3" rel="publisher" style="text-decoration:none;">
<img src="Android%20%20%D0%A1%D0%BE%D0%B7%D0%B4%D0%B0%D1%91%D0%BC%20%D1%81%D0%BE%D0%B1%D1%81%D1%82%D0%B2%D0%B5%D0%BD%D0%BD%D1%8B%D0%B9%20%D1%8D%D0%BB%D0%B5%D0%BC%D0%B5%D0%BD%D1%82%20View_files/gplus-16.png" alt="Google+" style="border:0;width:16px;height:16px;"></a>

    </span>
	
		<span style="float: right; margin:3px 5px 1px 1px; font-size:22px;">
        <!--Rating@Mail.ru LOGO--><a target="_top" href="http://top.mail.ru/jump?from=228158"><img src="Android%20%20%D0%A1%D0%BE%D0%B7%D0%B4%D0%B0%D1%91%D0%BC%20%D1%81%D0%BE%D0%B1%D1%81%D1%82%D0%B2%D0%B5%D0%BD%D0%BD%D1%8B%D0%B9%20%D1%8D%D0%BB%D0%B5%D0%BC%D0%B5%D0%BD%D1%82%20View_files/counter_002.gif" alt="Рейтинг@Mail.ru" border="0" height="31" width="88"></a><!--/LOGO-->
	</span>
    
    <span style="float: right; margin:2px 70px 1px 1px; font-size:22px;">
        <a href="http://feeds.feedburner.com/alexanderklimov/VJcl"><img src="Android%20%20%D0%A1%D0%BE%D0%B7%D0%B4%D0%B0%D1%91%D0%BC%20%D1%81%D0%BE%D0%B1%D1%81%D1%82%D0%B2%D0%B5%D0%BD%D0%BD%D1%8B%D0%B9%20%D1%8D%D0%BB%D0%B5%D0%BC%D0%B5%D0%BD%D1%82%20View_files/VJcl.gif" style="border:0" alt="" height="26" width="88"></a>
	</span>
	
<div style="float: right; margin:2px 70px 1px 1px;">
<!-- Place this tag where you want the +1 button to render. -->
<div id="___plusone_0" style="text-indent: 0px; margin: 0px; padding: 0px; background: none repeat scroll 0% 0% transparent; border-style: none; float: none; line-height: normal; font-size: 1px; vertical-align: baseline; display: inline-block; width: 300px; height: 15px;"><iframe title="+1" data-gapiattached="true" src="Android%20%20%D0%A1%D0%BE%D0%B7%D0%B4%D0%B0%D1%91%D0%BC%20%D1%81%D0%BE%D0%B1%D1%81%D1%82%D0%B2%D0%B5%D0%BD%D0%BD%D1%8B%D0%B9%20%D1%8D%D0%BB%D0%B5%D0%BC%D0%B5%D0%BD%D1%82%20View_files/fastbutton.htm" name="I0_1378022394129" id="I0_1378022394129" vspace="0" tabindex="0" style="position: static; top: 0px; width: 300px; margin: 0px; border-style: none; left: 0px; visibility: visible; height: 15px;" marginwidth="0" marginheight="0" hspace="0" frameborder="0" scrolling="no" width="100%"></iframe></div>

</div>

<!-- Place this tag after the last +1 button tag. -->
<script type="text/javascript">
  window.___gcfg = {lang: 'ru'};

  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
	

    </noindex>
</footer>

</div><iframe style="width: 1px; height: 1px; position: absolute; left: -100px;" src="Android%20%20%D0%A1%D0%BE%D0%B7%D0%B4%D0%B0%D1%91%D0%BC%20%D1%81%D0%BE%D0%B1%D1%81%D1%82%D0%B2%D0%B5%D0%BD%D0%BD%D1%8B%D0%B9%20%D1%8D%D0%BB%D0%B5%D0%BC%D0%B5%D0%BD%D1%82%20View_files/postmessageRelay.htm" id="oauth2relay1337100024" name="oauth2relay1337100024"></iframe><!--/.fluid-container-->    <!-- Le javascript
    ================================================== -->
    <!-- Placed at the end of the document so the pages load faster -->
    <script src="Android%20%20%D0%A1%D0%BE%D0%B7%D0%B4%D0%B0%D1%91%D0%BC%20%D1%81%D0%BE%D0%B1%D1%81%D1%82%D0%B2%D0%B5%D0%BD%D0%BD%D1%8B%D0%B9%20%D1%8D%D0%BB%D0%B5%D0%BC%D0%B5%D0%BD%D1%82%20View_files/jquery.js"></script>
    <script src="Android%20%20%D0%A1%D0%BE%D0%B7%D0%B4%D0%B0%D1%91%D0%BC%20%D1%81%D0%BE%D0%B1%D1%81%D1%82%D0%B2%D0%B5%D0%BD%D0%BD%D1%8B%D0%B9%20%D1%8D%D0%BB%D0%B5%D0%BC%D0%B5%D0%BD%D1%82%20View_files/bootstrap-transition.js"></script>
    <script src="Android%20%20%D0%A1%D0%BE%D0%B7%D0%B4%D0%B0%D1%91%D0%BC%20%D1%81%D0%BE%D0%B1%D1%81%D1%82%D0%B2%D0%B5%D0%BD%D0%BD%D1%8B%D0%B9%20%D1%8D%D0%BB%D0%B5%D0%BC%D0%B5%D0%BD%D1%82%20View_files/bootstrap-alert.js"></script>
    <script src="Android%20%20%D0%A1%D0%BE%D0%B7%D0%B4%D0%B0%D1%91%D0%BC%20%D1%81%D0%BE%D0%B1%D1%81%D1%82%D0%B2%D0%B5%D0%BD%D0%BD%D1%8B%D0%B9%20%D1%8D%D0%BB%D0%B5%D0%BC%D0%B5%D0%BD%D1%82%20View_files/bootstrap-modal.js"></script>
    <script src="Android%20%20%D0%A1%D0%BE%D0%B7%D0%B4%D0%B0%D1%91%D0%BC%20%D1%81%D0%BE%D0%B1%D1%81%D1%82%D0%B2%D0%B5%D0%BD%D0%BD%D1%8B%D0%B9%20%D1%8D%D0%BB%D0%B5%D0%BC%D0%B5%D0%BD%D1%82%20View_files/bootstrap-dropdown.js"></script>
    <script src="Android%20%20%D0%A1%D0%BE%D0%B7%D0%B4%D0%B0%D1%91%D0%BC%20%D1%81%D0%BE%D0%B1%D1%81%D1%82%D0%B2%D0%B5%D0%BD%D0%BD%D1%8B%D0%B9%20%D1%8D%D0%BB%D0%B5%D0%BC%D0%B5%D0%BD%D1%82%20View_files/bootstrap-scrollspy.js"></script>
    <script src="Android%20%20%D0%A1%D0%BE%D0%B7%D0%B4%D0%B0%D1%91%D0%BC%20%D1%81%D0%BE%D0%B1%D1%81%D1%82%D0%B2%D0%B5%D0%BD%D0%BD%D1%8B%D0%B9%20%D1%8D%D0%BB%D0%B5%D0%BC%D0%B5%D0%BD%D1%82%20View_files/bootstrap-tab.js"></script>
    <script src="Android%20%20%D0%A1%D0%BE%D0%B7%D0%B4%D0%B0%D1%91%D0%BC%20%D1%81%D0%BE%D0%B1%D1%81%D1%82%D0%B2%D0%B5%D0%BD%D0%BD%D1%8B%D0%B9%20%D1%8D%D0%BB%D0%B5%D0%BC%D0%B5%D0%BD%D1%82%20View_files/bootstrap-tooltip.js"></script>
    <script src="Android%20%20%D0%A1%D0%BE%D0%B7%D0%B4%D0%B0%D1%91%D0%BC%20%D1%81%D0%BE%D0%B1%D1%81%D1%82%D0%B2%D0%B5%D0%BD%D0%BD%D1%8B%D0%B9%20%D1%8D%D0%BB%D0%B5%D0%BC%D0%B5%D0%BD%D1%82%20View_files/bootstrap-popover.js"></script>
    <script src="Android%20%20%D0%A1%D0%BE%D0%B7%D0%B4%D0%B0%D1%91%D0%BC%20%D1%81%D0%BE%D0%B1%D1%81%D1%82%D0%B2%D0%B5%D0%BD%D0%BD%D1%8B%D0%B9%20%D1%8D%D0%BB%D0%B5%D0%BC%D0%B5%D0%BD%D1%82%20View_files/bootstrap-button.js"></script>
    <script src="Android%20%20%D0%A1%D0%BE%D0%B7%D0%B4%D0%B0%D1%91%D0%BC%20%D1%81%D0%BE%D0%B1%D1%81%D1%82%D0%B2%D0%B5%D0%BD%D0%BD%D1%8B%D0%B9%20%D1%8D%D0%BB%D0%B5%D0%BC%D0%B5%D0%BD%D1%82%20View_files/bootstrap-collapse.js"></script>
    <script src="Android%20%20%D0%A1%D0%BE%D0%B7%D0%B4%D0%B0%D1%91%D0%BC%20%D1%81%D0%BE%D0%B1%D1%81%D1%82%D0%B2%D0%B5%D0%BD%D0%BD%D1%8B%D0%B9%20%D1%8D%D0%BB%D0%B5%D0%BC%D0%B5%D0%BD%D1%82%20View_files/bootstrap-carousel.js"></script>
    <script src="Android%20%20%D0%A1%D0%BE%D0%B7%D0%B4%D0%B0%D1%91%D0%BC%20%D1%81%D0%BE%D0%B1%D1%81%D1%82%D0%B2%D0%B5%D0%BD%D0%BD%D1%8B%D0%B9%20%D1%8D%D0%BB%D0%B5%D0%BC%D0%B5%D0%BD%D1%82%20View_files/bootstrap-typeahead.js"></script>

</body></html>