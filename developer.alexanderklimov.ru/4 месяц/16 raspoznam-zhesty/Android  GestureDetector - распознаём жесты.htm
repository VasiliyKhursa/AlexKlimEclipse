<!DOCTYPE html>
<html><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta charset="utf-8">
<title>Android: GestureDetector - распознаём жесты</title>
   
<meta name="viewport" content="width=device-width, initial-scale=1.0">

<!-- Le styles -->
<link href="Android%20%20GestureDetector%20-%20%D1%80%D0%B0%D1%81%D0%BF%D0%BE%D0%B7%D0%BD%D0%B0%D1%91%D0%BC%20%D0%B6%D0%B5%D1%81%D1%82%D1%8B_files/bootstrap.css" rel="stylesheet">
<style type="text/css">
  body {
    padding-top: 60px;
    padding-bottom: 10px;
  }
  .sidebar-nav {
    padding: 9px 0;
  }
</style>
	
<link href="Android%20%20GestureDetector%20-%20%D1%80%D0%B0%D1%81%D0%BF%D0%BE%D0%B7%D0%BD%D0%B0%D1%91%D0%BC%20%D0%B6%D0%B5%D1%81%D1%82%D1%8B_files/bootstrap-responsive.css" rel="stylesheet">
	
   <!-- Le HTML5 shim, for IE6-8 support of HTML5 elements -->
    <!--[if lt IE 9]>
      <script src="http://html5shim.googlecode.com/svn/trunk/html5.js"></script>
    <![endif]-->

    <!-- Le fav and touch icons -->
    
<link rel="icon" href="http://developer.alexanderklimov.ru/favicon.ico" type="image/x-icon">
<link rel="shortcut icon" href="http://developer.alexanderklimov.ru/favicon.ico" type="image/x-icon">
</head>

<body>

<div class="navbar navbar-inverse navbar-fixed-top">
    <div class="navbar-inner">
        <div class="container-fluid">
        <a class="btn btn-navbar" data-toggle="collapse" data-target=".nav-collapse">
          <span class="icon-bar"></span>
          <span class="icon-bar"></span>
          <span class="icon-bar"></span>
        </a>
        
        <div class="nav-collapse collapse">
          <p class="navbar-text pull-right">
			<a data-toggle="" href="http://developer.alexanderklimov.ru/blocks/exit.php" class="navbar-link">tizerlab@yandex.ru (выход)</a>
          </p>
		  
		  
          
		  <ul class="nav pull-right">
                    <li id="fat-menu" class="dropdown">
                      <a href="#" id="drop3" role="button" class="dropdown-toggle" data-toggle="dropdown">Вход <b class="caret"></b></a>
                      <ul class="dropdown-menu" role="menu" aria-labelledby="drop3">
                        
                        <li><form action="http://developer.alexanderklimov.ru/blocks/testreg.php" method="post">
						    	<fieldset id="inputs">
		                        <input class="span2" id="username" name="login" placeholder="Ваш email адрес" required="" type="email">   
		                        <input class="span1" id="password" name="password" placeholder="Пароль" required="" type="password">
	                            </fieldset>
	                            <fieldset id="actions">
		                        <input class="btn" id="submit" name="submit" value="Войти" type="submit">
		                        
	                            </fieldset>
                            </form></li>
                      </ul>
                    </li>
                  </ul>


        </div><!--/.nav-collapse -->
        </div>
    </div>
</div>

<div class="row-fluid">
    <div class="span5">
        <p>
		<a href="http://developer.alexanderklimov.ru/"><img src="Android%20%20GestureDetector%20-%20%D1%80%D0%B0%D1%81%D0%BF%D0%BE%D0%B7%D0%BD%D0%B0%D1%91%D0%BC%20%D0%B6%D0%B5%D1%81%D1%82%D1%8B_files/header.png" alt="Сайт разработчика Александр Климова" border="0"></a>
		</p>
    
    </div><!--/span-->
    
	<div class="span5">
        <p style="color:green; font-style: italic; font-size: small;">
		/* Моя кошка замечательно разбирается в программировании. Стоит мне объяснить проблему ей - и все становится ясно. */<br>John Robbins, Debugging Applications, Microsoft Press, 2000
		</p>
    </div><!--/span-->
    
	<div class="span2">
        <p>
		<a href="http://feeds.feedburner.com/alexanderklimov/VJcl"><img src="Android%20%20GestureDetector%20-%20%D1%80%D0%B0%D1%81%D0%BF%D0%BE%D0%B7%D0%BD%D0%B0%D1%91%D0%BC%20%D0%B6%D0%B5%D1%81%D1%82%D1%8B_files/kot-2-rss-100.png" border="0"></a>
		</p>
    </div><!--/span-->
</div><!--/row-->
	
<div class="clearfix"></div><noindex><!--Rating@Mail.ru COUNTER--><script async="" src="Android%20%20GestureDetector%20-%20%D1%80%D0%B0%D1%81%D0%BF%D0%BE%D0%B7%D0%BD%D0%B0%D1%91%D0%BC%20%D0%B6%D0%B5%D1%81%D1%82%D1%8B_files/cbgapi.loaded_1"></script><script async="" src="Android%20%20GestureDetector%20-%20%D1%80%D0%B0%D1%81%D0%BF%D0%BE%D0%B7%D0%BD%D0%B0%D1%91%D0%BC%20%D0%B6%D0%B5%D1%81%D1%82%D1%8B_files/cbgapi.loaded_0"></script><script gapi_processed="true" src="Android%20%20GestureDetector%20-%20%D1%80%D0%B0%D1%81%D0%BF%D0%BE%D0%B7%D0%BD%D0%B0%D1%91%D0%BC%20%D0%B6%D0%B5%D1%81%D1%82%D1%8B_files/plusone.js" async="" type="text/javascript"></script><script language="JavaScript" type="text/javascript"><!--
d=document;var a='';a+=';r='+escape(d.referrer)
js=10//--></script><script language="JavaScript1.1" type="text/javascript"><!--
a+=';j='+navigator.javaEnabled()
js=11//--></script><script language="JavaScript1.2" type="text/javascript"><!--
s=screen;a+=';s='+s.width+'*'+s.height
a+=';d='+(s.colorDepth?s.colorDepth:s.pixelDepth)
js=12//--></script><script language="JavaScript1.3" type="text/javascript"><!--
js=13//--></script><script language="JavaScript" type="text/javascript"><!--
d.write('<IMG src="http://db.c7.b3.a0.top.mail.ru/counter'+
'?id=228158;js='+js+a+';rand='+Math.random()+
'" height="1" width="1" alt="top.mail.ru" border="0" />')
if(11<js)d.write('<'+'!-- ')//--></script><img src="Android%20%20GestureDetector%20-%20%D1%80%D0%B0%D1%81%D0%BF%D0%BE%D0%B7%D0%BD%D0%B0%D1%91%D0%BC%20%D0%B6%D0%B5%D1%81%D1%82%D1%8B_files/counter.gif" alt="top.mail.ru" border="0" height="1" width="1"><!-- <noscript><img
src="http://db.c7.b3.a0.top.mail.ru/counter?js=na;id=228158"
height="1" width="1" alt="top.mail.ru" border="0" /></noscript><script language="JavaScript" type="text/javascript"><!--
if(11<js)d.write('--'+'>')//--><!--/COUNTER--></noindex><ul class="nav nav-pills">
<li class=""><a href="http://rusnetframework.blogspot.com/">Блог</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/index.php">C#/Visual Basic</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/windowsphone/wp.php">Windows Phone</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/wpf/wpf.php">WPF</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/php">PHP</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/silverlight/silverlight.php">Silverlight</a></li>
<li class="active"><a href="http://developer.alexanderklimov.ru/android">Android</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/arduino">Arduino</a></li>
</ul>
<div class="container-fluid">
    
	<div class="row-fluid">
        <!--левое меню -->
		<div class="span2">
            <div class="well sidebar-nav">
            <ul class="nav nav-list">
<li class="active"><a href="http://developer.alexanderklimov.ru/android/index.php">Главная</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/android/theory/">Теория</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/android/views.php">Palette</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/android/catshop/catshop.php">Котошоп</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/android/animation.php">Анимация</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/android/sqlite/">SQLite</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/android/opengles/">OpenGL ES</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/android/library.php">Библиотеки</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/android/games.php">Игры</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/android/emulator.php">Эмулятор</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/android/tips-android.php">Советы</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/android/articles-android.php">Статьи</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/android/books.php">Книги</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/android/java/java.php">Java. Экспресс-курс</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/android/design/">Дизайн</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/android/opensource.php">Open Source</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/android/links.php">Полезные ресурсы</a></li>
</ul>            </div><!--/.well -->
        </div><!--/span-->


        <div class="span8">

		<div class="row-fluid">
            <div class="span12">
			
			            <div id="myModal" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
            <div class="modal-header">
              <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
              <h3 id="myModalLabel">Регистрация</h3>
            </div>
            <div class="modal-body">
            
<p>Полный текст статьи и исходники программы доступны только зарегистрированным участникам сайта.</p>

<p>Стоимость регистрации - символические 155 рублей.</p>

<p>Для регистрации сначала необходимо пополнить Яндекс.Кошелек - 
410011383280263 на указанную сумму (или Webmoney-кошелек R390884954122 
или QIWI - 9055113963 (кошелек, не на счёт телефона!)), а затем прислать
 письмо на адрес rusproject@mail.ru или alexander.klimoff@gmail.com с 
указанием, на какой кошелек вы делали оплату и реквизиты, по которым 
можно вас определить.</p>

<p>Не присылайте в письме мои номера кошельков - поверьте, я их знаю и без вас.</p>

<p>В ответном письме вы получите учётные данные для чтения статей из закрытой зоны за второй месяц.</p>

<p>Доступ к третьему месяцу обучения доступен только после оплаты второго месяца и составляет 155 руб.</p>

<p>Доступ к чётвертому месяцу обучения доступен после оплаты третьего месяца и составляет 155 руб. и т.д.</p>

<p>Также возможен приём на PayPal. Обратите внимание, что в этом случае стоимость одного месяца составляет 6$.</p>

<p>При оплате сразу четырех месяцев (2-5) - стоимость 600 руб.</p>

<p>Доступ даётся как минимум на один год. Для тех, кто оплатил третий и другие месяцы, сроки доступа увеличиваются.</p>

<p>
</p><form action="https://www.paypal.com/cgi-bin/webscr" method="post" target="_top">
<input name="cmd" value="_s-xclick" type="hidden">
<input name="hosted_button_id" value="VRED2NRVE927N" type="hidden">
<input src="Android%20%20GestureDetector%20-%20%D1%80%D0%B0%D1%81%D0%BF%D0%BE%D0%B7%D0%BD%D0%B0%D1%91%D0%BC%20%D0%B6%D0%B5%D1%81%D1%82%D1%8B_files/btn_paynow_LG.gif" name="submit" alt="PayPal — более безопасный и легкий способ оплаты через Интернет!" border="0" type="image">
<img alt="" src="Android%20%20GestureDetector%20-%20%D1%80%D0%B0%D1%81%D0%BF%D0%BE%D0%B7%D0%BD%D0%B0%D1%91%D0%BC%20%D0%B6%D0%B5%D1%81%D1%82%D1%8B_files/pixel.htm" border="0" height="1" width="1">
</form>
<p></p>			
			            
            </div>
            <div class="modal-footer">
              <button class="btn" data-dismiss="modal">Закрыть</button>
              
            </div>
          </div>
<h1 class="text-warning">GestureDetector - распознаём жесты</h1>
<p>Четвёртый месяц обучения (закрытая зона)</p>



<p>
<a href="#simpleongeturelistener">SimpleOnGestureListener</a><br>
<a href="#swipe">Жест Swipe</a><br>
<a href="#scalegesturedetector">ScaleGestureDetector</a><br>
<a href="#moveimage">Перемещаем картинку жестами</a><br>
</p>

<p>Android содержит классы для распознавания стандартных жестов при 
работе с сенсорными экранами. Мы не берём в расчёт такие стандартные 
жесты, как касание экрана (например, нажатия на кнопку) или касание 
экрана и движение по экрану (MotionEvent), которые изучали раньше. Речь 
идёт о более специфичных жестах типа жест пролистывания страниц, 
растягивания или сжимания изображения двумя пальцами и т.п.</p>


<p>Для подобных жестов существует отдельный класс <b>GestureDetector</b>. Давайте изучим его.</p>

<h2 class="text-warning" id="simpleongeturelistener">SimpleOnGestureListener</h2>

<p>Для начала рассмотрим простой пример с <b>SimpleOnGestureListener</b>. Даже само название говорит, что это Простой Слушатель Жестов.</p>

<p>Для опытов нам понадобится только текстовая метка, куда будем выводить информацию о событиях.</p>

<pre><code class="xml">
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
   android:layout_width="fill_parent"
   android:layout_height="fill_parent"
   android:orientation="vertical" &gt;
  
   &lt;TextView
       android:id="@+id/tvGestureEvent"
       android:layout_width="fill_parent"
       android:layout_height="wrap_content" /&gt;

&lt;/LinearLayout&gt;
</code></pre>

<p>Переходим к коду главной активности:</p>

<pre><code class="java">
package ru.alexanderklimov.gesturedetectordemo;

import android.os.Bundle;
import android.app.Activity;
import android.view.GestureDetector;
import android.view.GestureDetector.SimpleOnGestureListener;
import android.view.Menu;
import android.view.MotionEvent;
import android.widget.TextView;

public class MainActivity extends Activity {

	TextView tvGestureEvent;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);

		tvGestureEvent = (TextView) findViewById(R.id.tvGestureEvent);
	}

	@Override
	public boolean onTouchEvent(MotionEvent event) {
	 // TODO Auto-generated method stub
	    return gestureDetector.onTouchEvent(event);
	}
	
	SimpleOnGestureListener simpleongesturelistener = new SimpleOnGestureListener() {
		@Override
		public boolean onDoubleTap(MotionEvent e) {
			// TODO Auto-generated method stub
			tvGestureEvent.setText("onDoubleTap: \n" + e.toString());
			return super.onDoubleTap(e);
		}

		@Override
		public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX,
				float velocityY) {
			// TODO Auto-generated method stub
			tvGestureEvent.setText("onFling: \n" + e1.toString() + "\n"
					+ e2.toString() + "\n" + "velocityX= "
					+ String.valueOf(velocityX) + "\n" + "velocityY= "
					+ String.valueOf(velocityY) + "\n");
			return super.onFling(e1, e2, velocityX, velocityY);
		}

		@Override
		public void onLongPress(MotionEvent e) {
			// TODO Auto-generated method stub
			tvGestureEvent.setText("onLongPress: \n" + e.toString());
			super.onLongPress(e);
		}

		@Override
		public boolean onSingleTapConfirmed(MotionEvent e) {
			// TODO Auto-generated method stub
			tvGestureEvent.setText("onSingleTapConfirmed: \n" + e.toString());
			return super.onSingleTapConfirmed(e);
		}
	};

	GestureDetector gestureDetector = new GestureDetector(getBaseContext(),
			simpleongesturelistener);

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.activity_main, menu);
		return true;
	}
}
</code></pre>

<p>В данном примере мы сообщаем активности, что в методе <b>onTouchEvent()</b> будут использоваться события от класса GestureDetector: <b>onSingleTapConfirmed()</b> (одиночное касание), <b>onDoubleTap()</b> (двойное касание), <b>onLongPress()</b> (долгое касание) и <b>onFling()</b> (движение по экрану с ускорением). Результаты срабатывания соответствующих методов выводим на экран для наглядности.</p>

<p><img src="Android%20%20GestureDetector%20-%20%D1%80%D0%B0%D1%81%D0%BF%D0%BE%D0%B7%D0%BD%D0%B0%D1%91%D0%BC%20%D0%B6%D0%B5%D1%81%D1%82%D1%8B_files/gesturedetector1.png" alt="GestureDetector"> <img src="Android%20%20GestureDetector%20-%20%D1%80%D0%B0%D1%81%D0%BF%D0%BE%D0%B7%D0%BD%D0%B0%D1%91%D0%BC%20%D0%B6%D0%B5%D1%81%D1%82%D1%8B_files/gesturedetector2.png" alt="GestureDetector"></p>

<p><img src="Android%20%20GestureDetector%20-%20%D1%80%D0%B0%D1%81%D0%BF%D0%BE%D0%B7%D0%BD%D0%B0%D1%91%D0%BC%20%D0%B6%D0%B5%D1%81%D1%82%D1%8B_files/gesturedetector3.png" alt="GestureDetector"> <img src="Android%20%20GestureDetector%20-%20%D1%80%D0%B0%D1%81%D0%BF%D0%BE%D0%B7%D0%BD%D0%B0%D1%91%D0%BC%20%D0%B6%D0%B5%D1%81%D1%82%D1%8B_files/gesturedetector4.png" alt="GestureDetector"></p>

<h2 class="text-warning" id="swipe">Жест Swipe</h2>

<p>Метод <b>onFling()</b> позволяет узнать движение пальца по экрану 
(жест Fling), но часто требуется узнать направление движения пальца: 
влево, вправо, вверх, вниз. Доработаем метод для решения задачи:</p>

<pre><code class="java">
@Override
public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX,
		float velocityY) {
	String swipe = "";
	float sensitvity = 50;

	// TODO Auto-generated method stub
	if ((e1.getX() - e2.getX()) &gt; sensitvity) {
		swipe += "Swipe Left\n";
	} else if ((e2.getX() - e1.getX()) &gt; sensitvity) {
		swipe += "Swipe Right\n";
	} else {
		swipe += "\n";
	}

	if ((e1.getY() - e2.getY()) &gt; sensitvity) {
		swipe += "Swipe Up\n";
	} else if ((e2.getY() - e1.getY()) &gt; sensitvity) {
		swipe += "Swipe Down\n";
	} else {
		swipe += "\n";
	}

	tvGestureEvent.setText(swipe);

	return super.onFling(e1, e2, velocityX, velocityY);
}
</code></pre>

<p>Мы сравниваем координаты в начале и в конце движения и отсюда делаем 
вывод о движении пальца. Если движение будет достаточно ровным в одну из
 сторон, то будет определён один жест (вправо, влево, вверх, вниз), если
 сделать движение по диагонали, то сможем определить два направление, 
например, вниз-влево.</p>

<p><img src="Android%20%20GestureDetector%20-%20%D1%80%D0%B0%D1%81%D0%BF%D0%BE%D0%B7%D0%BD%D0%B0%D1%91%D0%BC%20%D0%B6%D0%B5%D1%81%D1%82%D1%8B_files/gesturedetector5.png" alt="Swipe"> <img src="Android%20%20GestureDetector%20-%20%D1%80%D0%B0%D1%81%D0%BF%D0%BE%D0%B7%D0%BD%D0%B0%D1%91%D0%BC%20%D0%B6%D0%B5%D1%81%D1%82%D1%8B_files/gesturedetector5.png" alt="Swipe"></p>

<h2 class="text-warning" id="scalegesturedetector">ScaleGestureDetector</h2>

<p>Для определения жеста сближения двух пальцев или движения в обратную сторону можно использовать класс <b>android.view.ScaleGestureDetector</b>. Оставим разметку от предыдущего примера без изменений. А код изменится незначительно:</p>

<pre><code class="java">
package ru.alexanderklimov.gesturedetectordemo;

import android.os.Bundle;
import android.app.Activity;
import android.view.MotionEvent;
import android.view.ScaleGestureDetector;
import android.view.ScaleGestureDetector.SimpleOnScaleGestureListener;
import android.view.View;
import android.widget.TextView;

public class MainActivity extends Activity {

	TextView tvGestureEvent;
	ScaleGestureDetector scaleGestureDetector;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);

		tvGestureEvent = (TextView) findViewById(R.id.tvGestureEvent);

		scaleGestureDetector = new ScaleGestureDetector(this,
				new simpleOnScaleGestureListener());
	}

	@Override
	public boolean onTouchEvent(MotionEvent event) {
		// TODO Auto-generated method stub
		scaleGestureDetector.onTouchEvent(event);
		return true;
	}

	public class simpleOnScaleGestureListener extends
			SimpleOnScaleGestureListener {
		@Override
		public boolean onScale(ScaleGestureDetector detector) {
			// TODO Auto-generated method stub
			tvGestureEvent.setText(String.valueOf(detector.getScaleFactor()));
			return true;
		}

		@Override
		public boolean onScaleBegin(ScaleGestureDetector detector) {
			// TODO Auto-generated method stub
			tvGestureEvent.setVisibility(View.VISIBLE);
			return true;
		}

		@Override
		public void onScaleEnd(ScaleGestureDetector detector) {
			// TODO Auto-generated method stub
			tvGestureEvent.setVisibility(View.INVISIBLE);
		}
	}
}
</code></pre>

<p>На эмуляторе не получится проверить, так как требуется участие двух 
пальцев. На экран будет выводиться информация о степени 
увеличения/уменьшения расстояния между пальцами.</p>

<h2 class="text-warning" id="moveimage">Перемещаем картинку жестами</h2>

<p>Создадим пример перемещения объектами пальцами по экрану. Пример не идеален и требует доработки, но понять основы можно.</p>

<p>Создадим новый проект со следующий разметкой</p>

<pre><code class="xml">
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="fill_parent"
    android:layout_height="fill_parent"
    android:orientation="vertical" &gt;

    &lt;TextView
        android:layout_width="fill_parent"
        android:layout_height="wrap_content"
        android:text="Подвигай котика" /&gt;

    &lt;FrameLayout
        android:id="@+id/graphics_holder"
        android:layout_width="fill_parent"
        android:layout_height="fill_parent" &gt;
    &lt;/FrameLayout&gt;

&lt;/LinearLayout&gt;
</code></pre>

<p>Перейдём к программной части. В методе onCreate() инициализируем 
компонент FrameLayout и добавим в него новый элемент класса 
PlayAreaView:</p>

<pre><code class="java">
@Override
protected void onCreate(Bundle savedInstanceState) {
	super.onCreate(savedInstanceState);
	setContentView(R.layout.activity_main);
	FrameLayout frame = (FrameLayout) findViewById(R.id.graphics_holder);
	PlayAreaView image = new PlayAreaView(this);
	frame.addView(image);
}
</code></pre>

<p>Создадим новый внутренний класс PlayAreaView.</p>

<p>Мы будем рисовать на объекте Canvas (холст). Для доступа к объекту 
Canvas достаточно переопределить метод onDraw() объекта View, у которого
 есть единственный параметр, предоставляющий доступ к Canvas. Чтобы 
вывести растровый рисунок на холсте, нужно вызвать метод drawBitmap() 
объекта Canvas:</p>

<pre><code class="java">
private class PlayAreaView extends View {
    private Matrix translate;
    private Bitmap droid;
	
    protected void onDraw(Canvas canvas) {
        canvas.drawBitmap(droid, translate, null);
        Matrix m = canvas.getMatrix();
    }
}
</code></pre>

<p>Классу нужен конструктор. В нем мы зададим GestureDetector. A 
GestureDetector - это класс, работающий с событиями касания. При 
обнаружении касания он сообщает объекту GestureListener тип касания или 
другую информацию. GestureListener позволяет реагировать на поступившую 
информацию - например двигать наш объект.</p>

<pre><code class="java">
public PlayAreaView(Context context) {
    super(context);
    translate = new Matrix();
    gestures = new GestureDetector(MainActivity.this,
            new GestureListener(this));
    droid = BitmapFactory.decodeResource(getResources(),
            R.drawable.droid_g);
}
</code></pre>

<p>Мы инициализируем переменную типа Matrix. С ее помощью мы просто 
выводим изображение в исходной позиции в левом верхнем углу. Далее мы 
создаем и инициализируем GestureDetector при помощи объекта 
GestureListener. 
И, наконец, загружаем картинку из ресурсов в объект Bitmap. Эта картинка
 будет использоваться в качестве движущего объекта на экране.</p>

<p>Нам следует переопределить метод onTouchEvent() класса PlayAreaView:</p>

<pre><code class="java">
@Override
public boolean onTouchEvent(MotionEvent event) {
	return gestures.onTouchEvent(event);
}
</code></pre>

<p>В методе мы передаём управление объекту классу GestureDetector, 
который будет обрабатывать все касания для нашего созданного объекта 
View. GestureDetector сам ничего не делает с событиями касаний, а только
 распознает их и вызывает класс GestureListener.</p>

<p>Чтобы обрабатывать события, поступающие от класса GestureDetector, 
необходимо реализовать класс GestureListener. Нас интересует события 
типа двойного касания и другие жесты. Поэтому реализуем два интерфейса 
OnGestureListener и OnDoubleTapListener.</p>

<pre><code class="java">
private class GestureListener implements GestureDetector.OnGestureListener,
		GestureDetector.OnDoubleTapListener {

	PlayAreaView view;

	public GestureListener(PlayAreaView view) {
		this.view = view;
	}
}
</code></pre>

<p>Добавив нужные интерфейсы, можем добавить нужные методы для распознавания жестов. Например, метод onDown():</p>

<pre><code class="java">
@Override
public boolean onDown(MotionEvent e) {
	// Log.v(DEBUG_TAG, "onDown");
	return true;
}
</code></pre>

<p>Если метод onDown() не вернёт true, то другие жесты не будут определены. Если они вас не интересуют, то можете вернуть false.</p>

<p>Объект MotionEvent, используемый в параметре, позволяет получить информацию о характере жеста.</p>

<p>В Android есть еще один удобный класс <b>SimpleOnGestureListener</b>, который сочетает в себе два интерфейса OnGestureListener и OnDoubleTapListener в одном классе.</p>

<p>Когда пользователь касается экрана и начинает двигать пальцем, то 
движение воспринимается как скролл или перемещение. Для данного движения
 есть метод  onScroll() в интерфейсе OnGestureListener:</p>

<pre><code class="java">
@Override
public boolean onScroll(MotionEvent e1, MotionEvent e2,
		float distanceX, float distanceY) {
	// Log.v(DEBUG_TAG, "onScroll");

	view.onMove(-distanceX, -distanceY);
	return true;
}
</code></pre>

<p>Используя данный метод, мы можем сдвинуть объект PlayAreaView при помощи метода onMove().</p>

<p>Изображение может уйти за пределы экрана. Вы можете пойти двумя 
путями. Первый - вычислять координаты ограничивающего прямоугольника 
экран и не допускать выхода изображения за его пределы. Второй способ - 
вернуть объект в исходное положение через двойное касание экрана. Для 
второго варианта мы можем написать метод  onDoubleTap() из интерфейса 
OnDoubleTapListener:</p>

<pre><code class="java">
@Override
public boolean onDoubleTapEvent(MotionEvent e) {
	// Log.v(DEBUG_TAG, "onDoubleTapEvent");
	return false;
}
</code></pre>

<p>Жест Fling - это когда мы придаём ускорение объекту. Реализация жеста
 ложится на программиста. В игре это может привести к столкновениям с 
другими объектами с последующими отскоками.</p>

<pre><code class="java">
@Override
public boolean onFling(MotionEvent e1, MotionEvent e2,
        final float velocityX, final float velocityY) {
    Log.v(DEBUG_TAG, "onFling");
    final float distanceTimeFactor = 0.4f;
    final float totalDx = (distanceTimeFactor * velocityX/2);
    final float totalDy = (distanceTimeFactor * velocityY/2);
    view.onAnimateMove(totalDx, totalDy,
            (long) (1000 * distanceTimeFactor));
    return true;
}
</code></pre>

<p>Задав скорость перемещения объекта, мы можем двигать объект при 
помощи метода onAnimateMove(). Предложенные значения являются 
подходящими для большинства устройств. Но возможно вы предпочтете свой 
метод задания величин для перемещения объекта.</p>

<p>После того, как мы определились с жестами, можно заняться реальным 
перемещением объекта. В классе PlayAreaView добавим метод onMove():</p>

<pre><code class="java">
public void onMove(float dx, float dy) {
    translate.postTranslate(dx, dy);
    invalidate();
}
</code></pre>

<p>Метод делает две вещи. Сначала мы сдвигаем объект из одной точки в 
другую. Затем мы перерисовываем объект, чтобы увидеть его в новом месте и
 удалить изображение из старого места.</p>

<p>Также нам нужен метод onResetLocation(), чтобы обнулить информацию о 
перемещении объекта. Таким образом позиция объекта станет текущей.</p>

<pre><code class="java">
public void onResetLocation() {
    translate.reset();
    invalidate();
}
</code></pre>

<p>Чтобы перемещение объекта было более плавным, недостаточно просто 
перерисовать его в новой позиции. Нужно воспользоваться анимацией, 
которая перерисовывает объект очень быстро, что движение кажется 
плавным.
Чтобы анимация была более реалистичной, воспользуемся интерполятором. 
Начнём с метода onAnimateMove():</p>

<pre><code class="java">
private Matrix animateStart;
private Interpolator animateInterpolator;
private long startTime;
private long endTime;
private float totalAnimDx;
private float totalAnimDy;

public void onAnimateMove(float dx, float dy, long duration) {
    animateStart = new Matrix(translate);
    animateInterpolator = new OvershootInterpolator();
    startTime = System.currentTimeMillis();
    endTime = startTime + duration;
    totalAnimDx = dx;
    totalAnimDy = dy;
    post(new Runnable() {
        @Override
        public void run() {
            onAnimateStep();
        }
    });
}
</code></pre>

<p>Мы отслеживаем начальную позицию, начальное и конечное время. 
Подключаем класс OvershootInterpolator. Используя полученные данные, мы 
запускаем метод onAnimationStep(). Чтобы анимация не влияла на 
отзывчивость приложения, то операциию выполняем в другом потоке.</p>

<pre><code class="java">
private void onAnimateStep() {
    long curTime = System.currentTimeMillis();
    float percentTime = (float) (curTime - startTime)
            / (float) (endTime - startTime);
    float percentDistance = animateInterpolator
            .getInterpolation(percentTime);
    float curDx = percentDistance * totalAnimDx;
    float curDy = percentDistance * totalAnimDy;
    translate.set(animateStart);
    onMove(curDx, curDy);
    Log.v(DEBUG_TAG, "We're " + percentDistance + " of the way there!");
    if (percentTime &lt; 1.0f) {
        post(new Runnable() {
            @Override
            public void run() {
                onAnimateStep();
            }
        });
    }
}
</code></pre>

<p>В данном методе определяется время для анимации, чтобы задать расстояние для движения. После чего объект перемещается.</p>

<p>Можно запустить проект и посмотреть, как это всё работает.</p>

<p>Пример взять с сайта <a href="http://mobile.tutsplus.com/tutorials/android/android-gesture/">Android SDK: Introduction to Gestures</a>, там же можно посмотреть видеодемонстрацию.</p>

<details>
    <summary>Показать код (щелкните мышкой)</summary>
package ru.alexanderklimov.gesturecat;

import android.os.Bundle;
import android.app.Activity;
import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Matrix;
import android.view.GestureDetector;
import android.view.Menu;
import android.view.MotionEvent;
import android.view.View;
import android.view.animation.Interpolator;
import android.view.animation.OvershootInterpolator;
import android.widget.FrameLayout;

public class MainActivity extends Activity {

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		FrameLayout frame = (FrameLayout) findViewById(R.id.graphics_holder);
		PlayAreaView image = new PlayAreaView(this);
		frame.addView(image);
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.main, menu);
		return true;
	}

	private class PlayAreaView extends View {

		private GestureDetector gestures;
		private Matrix translate;
		private Bitmap droid;

		private Matrix animateStart;
		private Interpolator animateInterpolator;
		private long startTime;
		private long endTime;
		private float totalAnimDx;
		private float totalAnimDy;

		public void onAnimateMove(float dx, float dy, long duration) {
			animateStart = new Matrix(translate);
			animateInterpolator = new OvershootInterpolator();
			startTime = System.currentTimeMillis();
			endTime = startTime + duration;
			totalAnimDx = dx;
			totalAnimDy = dy;
			post(new Runnable() {
				@Override
				public void run() {
					onAnimateStep();
				}
			});
		}

		private void onAnimateStep() {
			long curTime = System.currentTimeMillis();
			float percentTime = (float) (curTime - startTime)
					/ (float) (endTime - startTime);
			float percentDistance = animateInterpolator
					.getInterpolation(percentTime);
			float curDx = percentDistance * totalAnimDx;
			float curDy = percentDistance * totalAnimDy;
			translate.set(animateStart);
			onMove(curDx, curDy);

			// Log.v(DEBUG_TAG, "We're " + percentDistance +
			// " of the way there!");
			if (percentTime &lt; 1.0f) {
				post(new Runnable() {
					@Override
					public void run() {
						onAnimateStep();
					}
				});
			}
		}

		public void onMove(float dx, float dy) {
			translate.postTranslate(dx, dy);
			invalidate();
		}

		public void onResetLocation() {
			translate.reset();
			invalidate();
		}

		public void onSetLocation(float dx, float dy) {
			translate.postTranslate(dx, dy);
		}

		public PlayAreaView(Context context) {
			super(context);
			translate = new Matrix();
			gestures = new GestureDetector(MainActivity.this,
					new GestureListener(this));
			droid = BitmapFactory.decodeResource(getResources(),
					R.drawable.ic_launcher);
		}

		@Override
		protected void onDraw(Canvas canvas) {
			// Log.v(DEBUG_TAG, "onDraw");
			canvas.drawBitmap(droid, translate, null);
			Matrix m = canvas.getMatrix();
			// Log.d(DEBUG_TAG, "Matrix: " + translate.toShortString());
			// Log.d(DEBUG_TAG, "Canvas: " + m.toShortString());
		}

		@Override
		public boolean onTouchEvent(MotionEvent event) {
			return gestures.onTouchEvent(event);
		}

	}

	private class GestureListener implements GestureDetector.OnGestureListener,
			GestureDetector.OnDoubleTapListener {

		PlayAreaView view;

		public GestureListener(PlayAreaView view) {
			this.view = view;
		}

		@Override
		public boolean onDown(MotionEvent e) {
			// Log.v(DEBUG_TAG, "onDown");
			return true;
		}

		@Override
		public boolean onFling(MotionEvent e1, MotionEvent e2,
				final float velocityX, final float velocityY) {
			// Log.v(DEBUG_TAG, "onFling");
			final float distanceTimeFactor = 0.4f;
			final float totalDx = (distanceTimeFactor * velocityX / 2);
			final float totalDy = (distanceTimeFactor * velocityY / 2);

			view.onAnimateMove(totalDx, totalDy,
					(long) (1000 * distanceTimeFactor));
			return true;
		}

		@Override
		public boolean onDoubleTap(MotionEvent e) {
			// Log.v(DEBUG_TAG, "onDoubleTap");
			view.onResetLocation();
			return true;
		}

		@Override
		public void onLongPress(MotionEvent e) {
			// Log.v(DEBUG_TAG, "onLongPress");
		}

		@Override
		public boolean onScroll(MotionEvent e1, MotionEvent e2,
				float distanceX, float distanceY) {
			// Log.v(DEBUG_TAG, "onScroll");

			view.onMove(-distanceX, -distanceY);
			return true;
		}

		@Override
		public void onShowPress(MotionEvent e) {
			// Log.v(DEBUG_TAG, "onShowPress");
		}

		@Override
		public boolean onSingleTapUp(MotionEvent e) {
			// Log.v(DEBUG_TAG, "onSingleTapUp");
			return false;
		}

		@Override
		public boolean onDoubleTapEvent(MotionEvent e) {
			// Log.v(DEBUG_TAG, "onDoubleTapEvent");
			return false;
		}

		@Override
		public boolean onSingleTapConfirmed(MotionEvent e) {
			// Log.v(DEBUG_TAG, "onSingleTapConfirmed");
			return false;
		}
	}
}
</details>




<h2 class="text-warning">Примеры</h2>

<p><a href="http://developer.alexanderklimov.ru/android/views/viewflipper2.php">ViewFlipper. Управление жестами</a></p>
<p><a href="http://developer.alexanderklimov.ru/android/views/imageswitcher.php#gesture">ImageSwitcher. Управление жестами</a></p>

</div><!--/span-->
        </div><!--/row-->	
		  
        </div><!--/span-->
		
		<div class="span2">
            <div class="well sidebar-nav">
    <h4><span class="label label-info">Реклама</span></h4>
    <script type="text/javascript"><!--
    google_ad_client = "pub-4224968932772057";
    /* 120x600AlexKlimov */
    google_ad_slot = "0305552138";
    google_ad_width = 120;
    google_ad_height = 600;
    //-->
    </script>
    <script type="text/javascript" src="Android%20%20GestureDetector%20-%20%D1%80%D0%B0%D1%81%D0%BF%D0%BE%D0%B7%D0%BD%D0%B0%D1%91%D0%BC%20%D0%B6%D0%B5%D1%81%D1%82%D1%8B_files/show_ads.js">
    </script>
</div><!--/.well -->        </div><!--/span-->
		
      </div><!--/row-->
	  
	
      <hr>
	  
	  	  <div class="row-fluid">
	  <div class="span12">
	  <img src="Android%20%20GestureDetector%20-%20%D1%80%D0%B0%D1%81%D0%BF%D0%BE%D0%B7%D0%BD%D0%B0%D1%91%D0%BC%20%D0%B6%D0%B5%D1%81%D1%82%D1%8B_files/cat_bottom.png" align="right">
</div><!--/span-->
        </div><!--/row-->

<footer>
    <noindex>
    <span style="float:left; margin:3px 1px 1px 2px;">
	    © 2013 <a href="mailto:rusproject@mail.ru">А.Климов</a>
		
		<!-- Place this code where you want the badge to render. -->
<a href="http://plus.google.com/109061106977829925124?prsrc=3" rel="publisher" style="text-decoration:none;">
<img src="Android%20%20GestureDetector%20-%20%D1%80%D0%B0%D1%81%D0%BF%D0%BE%D0%B7%D0%BD%D0%B0%D1%91%D0%BC%20%D0%B6%D0%B5%D1%81%D1%82%D1%8B_files/gplus-16.png" alt="Google+" style="border:0;width:16px;height:16px;"></a>

    </span>
	
		<span style="float: right; margin:3px 5px 1px 1px; font-size:22px;">
        <!--Rating@Mail.ru LOGO--><a target="_top" href="http://top.mail.ru/jump?from=228158"><img src="Android%20%20GestureDetector%20-%20%D1%80%D0%B0%D1%81%D0%BF%D0%BE%D0%B7%D0%BD%D0%B0%D1%91%D0%BC%20%D0%B6%D0%B5%D1%81%D1%82%D1%8B_files/counter_002.gif" alt="Рейтинг@Mail.ru" border="0" height="31" width="88"></a><!--/LOGO-->
	</span>
    
    <span style="float: right; margin:2px 70px 1px 1px; font-size:22px;">
        <a href="http://feeds.feedburner.com/alexanderklimov/VJcl"><img src="Android%20%20GestureDetector%20-%20%D1%80%D0%B0%D1%81%D0%BF%D0%BE%D0%B7%D0%BD%D0%B0%D1%91%D0%BC%20%D0%B6%D0%B5%D1%81%D1%82%D1%8B_files/VJcl.gif" style="border:0" alt="" height="26" width="88"></a>
	</span>
	
<div style="float: right; margin:2px 70px 1px 1px;">
<!-- Place this tag where you want the +1 button to render. -->
<div id="___plusone_0" style="text-indent: 0px; margin: 0px; padding: 0px; background: none repeat scroll 0% 0% transparent; border-style: none; float: none; line-height: normal; font-size: 1px; vertical-align: baseline; display: inline-block; width: 300px; height: 15px;"><iframe title="+1" data-gapiattached="true" src="Android%20%20GestureDetector%20-%20%D1%80%D0%B0%D1%81%D0%BF%D0%BE%D0%B7%D0%BD%D0%B0%D1%91%D0%BC%20%D0%B6%D0%B5%D1%81%D1%82%D1%8B_files/fastbutton.htm" name="I0_1379249083349" id="I0_1379249083349" vspace="0" tabindex="0" style="position: static; top: 0px; width: 300px; margin: 0px; border-style: none; left: 0px; visibility: visible; height: 15px;" marginwidth="0" marginheight="0" hspace="0" frameborder="0" scrolling="no" width="100%"></iframe></div>

</div>

<!-- Place this tag after the last +1 button tag. -->
<script type="text/javascript">
  window.___gcfg = {lang: 'ru'};

  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
	

    </noindex>
</footer>

</div><iframe style="width: 1px; height: 1px; position: absolute; top: -100px;" src="Android%20%20GestureDetector%20-%20%D1%80%D0%B0%D1%81%D0%BF%D0%BE%D0%B7%D0%BD%D0%B0%D1%91%D0%BC%20%D0%B6%D0%B5%D1%81%D1%82%D1%8B_files/postmessageRelay.htm" id="oauth2relay804691470" name="oauth2relay804691470"></iframe><!--/.fluid-container-->    <!-- Le javascript
    ================================================== -->
    <!-- Placed at the end of the document so the pages load faster -->
    <script src="Android%20%20GestureDetector%20-%20%D1%80%D0%B0%D1%81%D0%BF%D0%BE%D0%B7%D0%BD%D0%B0%D1%91%D0%BC%20%D0%B6%D0%B5%D1%81%D1%82%D1%8B_files/jquery.js"></script>
    <script src="Android%20%20GestureDetector%20-%20%D1%80%D0%B0%D1%81%D0%BF%D0%BE%D0%B7%D0%BD%D0%B0%D1%91%D0%BC%20%D0%B6%D0%B5%D1%81%D1%82%D1%8B_files/bootstrap-transition.js"></script>
    <script src="Android%20%20GestureDetector%20-%20%D1%80%D0%B0%D1%81%D0%BF%D0%BE%D0%B7%D0%BD%D0%B0%D1%91%D0%BC%20%D0%B6%D0%B5%D1%81%D1%82%D1%8B_files/bootstrap-alert.js"></script>
    <script src="Android%20%20GestureDetector%20-%20%D1%80%D0%B0%D1%81%D0%BF%D0%BE%D0%B7%D0%BD%D0%B0%D1%91%D0%BC%20%D0%B6%D0%B5%D1%81%D1%82%D1%8B_files/bootstrap-modal.js"></script>
    <script src="Android%20%20GestureDetector%20-%20%D1%80%D0%B0%D1%81%D0%BF%D0%BE%D0%B7%D0%BD%D0%B0%D1%91%D0%BC%20%D0%B6%D0%B5%D1%81%D1%82%D1%8B_files/bootstrap-dropdown.js"></script>
    <script src="Android%20%20GestureDetector%20-%20%D1%80%D0%B0%D1%81%D0%BF%D0%BE%D0%B7%D0%BD%D0%B0%D1%91%D0%BC%20%D0%B6%D0%B5%D1%81%D1%82%D1%8B_files/bootstrap-scrollspy.js"></script>
    <script src="Android%20%20GestureDetector%20-%20%D1%80%D0%B0%D1%81%D0%BF%D0%BE%D0%B7%D0%BD%D0%B0%D1%91%D0%BC%20%D0%B6%D0%B5%D1%81%D1%82%D1%8B_files/bootstrap-tab.js"></script>
    <script src="Android%20%20GestureDetector%20-%20%D1%80%D0%B0%D1%81%D0%BF%D0%BE%D0%B7%D0%BD%D0%B0%D1%91%D0%BC%20%D0%B6%D0%B5%D1%81%D1%82%D1%8B_files/bootstrap-tooltip.js"></script>
    <script src="Android%20%20GestureDetector%20-%20%D1%80%D0%B0%D1%81%D0%BF%D0%BE%D0%B7%D0%BD%D0%B0%D1%91%D0%BC%20%D0%B6%D0%B5%D1%81%D1%82%D1%8B_files/bootstrap-popover.js"></script>
    <script src="Android%20%20GestureDetector%20-%20%D1%80%D0%B0%D1%81%D0%BF%D0%BE%D0%B7%D0%BD%D0%B0%D1%91%D0%BC%20%D0%B6%D0%B5%D1%81%D1%82%D1%8B_files/bootstrap-button.js"></script>
    <script src="Android%20%20GestureDetector%20-%20%D1%80%D0%B0%D1%81%D0%BF%D0%BE%D0%B7%D0%BD%D0%B0%D1%91%D0%BC%20%D0%B6%D0%B5%D1%81%D1%82%D1%8B_files/bootstrap-collapse.js"></script>
    <script src="Android%20%20GestureDetector%20-%20%D1%80%D0%B0%D1%81%D0%BF%D0%BE%D0%B7%D0%BD%D0%B0%D1%91%D0%BC%20%D0%B6%D0%B5%D1%81%D1%82%D1%8B_files/bootstrap-carousel.js"></script>
    <script src="Android%20%20GestureDetector%20-%20%D1%80%D0%B0%D1%81%D0%BF%D0%BE%D0%B7%D0%BD%D0%B0%D1%91%D0%BC%20%D0%B6%D0%B5%D1%81%D1%82%D1%8B_files/bootstrap-typeahead.js"></script>

</body></html>