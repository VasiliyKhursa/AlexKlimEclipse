<!DOCTYPE html>
<html><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta charset="utf-8">
<title>Android: Сохранение настроек</title>

<meta name="viewport" content="width=device-width, initial-scale=1.0">

<!-- Le styles -->
<link href="Android%20%20%D0%A1%D0%BE%D1%85%D1%80%D0%B0%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%BD%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B5%D0%BA_files/bootstrap.css" rel="stylesheet">
<style type="text/css">
  body {
    padding-top: 60px;
    padding-bottom: 10px;
  }
  .sidebar-nav {
    padding: 9px 0;
  }
</style>
	
<link href="Android%20%20%D0%A1%D0%BE%D1%85%D1%80%D0%B0%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%BD%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B5%D0%BA_files/bootstrap-responsive.css" rel="stylesheet">
	
   <!-- Le HTML5 shim, for IE6-8 support of HTML5 elements -->
    <!--[if lt IE 9]>
      <script src="http://html5shim.googlecode.com/svn/trunk/html5.js"></script>
    <![endif]-->

    <!-- Le fav and touch icons -->
    
<link rel="icon" href="http://developer.alexanderklimov.ru/favicon.ico" type="image/x-icon">
<link rel="shortcut icon" href="http://developer.alexanderklimov.ru/favicon.ico" type="image/x-icon">   
</head>

<body>
<div class="navbar navbar-inverse navbar-fixed-top">
    <div class="navbar-inner">
        <div class="container-fluid">
        <a class="btn btn-navbar" data-toggle="collapse" data-target=".nav-collapse">
          <span class="icon-bar"></span>
          <span class="icon-bar"></span>
          <span class="icon-bar"></span>
        </a>
        
        <div class="nav-collapse collapse">
          <p class="navbar-text pull-right">
			<a data-toggle="modal" href="#myModal" class="navbar-link">Гость</a>
          </p>
          <ul class="nav">
            
          </ul>
        </div><!--/.nav-collapse -->
        </div>
    </div>
</div>

<div class="row-fluid">
    <div class="span5">
        <p>
		<a href="http://developer.alexanderklimov.ru/"><img src="Android%20%20%D0%A1%D0%BE%D1%85%D1%80%D0%B0%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%BD%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B5%D0%BA_files/header.png" alt="Сайт разработчика Александр Климова" border="0"></a>
		</p>
    
    </div><!--/span-->
    
	<div class="span5">
        <p style="color:green; font-style: italic; font-size: small;">
		/* Моя кошка замечательно разбирается в программировании. Стоит мне объяснить проблему ей - и все становится ясно. */<br>John Robbins, Debugging Applications, Microsoft Press, 2000
		</p>
    </div><!--/span-->
    
	<div class="span2">
        <p>
		<a href="http://feeds.feedburner.com/alexanderklimov/VJcl"><img src="Android%20%20%D0%A1%D0%BE%D1%85%D1%80%D0%B0%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%BD%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B5%D0%BA_files/kot-2-rss-100.png" border="0"></a>
		</p>
    </div><!--/span-->
</div><!--/row-->	
<div class="clearfix"></div>
	
<noindex><!--Rating@Mail.ru COUNTER--><script async="" src="Android%20%20%D0%A1%D0%BE%D1%85%D1%80%D0%B0%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%BD%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B5%D0%BA_files/cbgapi.loaded_1"></script><script async="" src="Android%20%20%D0%A1%D0%BE%D1%85%D1%80%D0%B0%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%BD%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B5%D0%BA_files/cbgapi.loaded_0"></script><script gapi_processed="true" src="Android%20%20%D0%A1%D0%BE%D1%85%D1%80%D0%B0%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%BD%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B5%D0%BA_files/plusone.js" async="" type="text/javascript"></script><script language="JavaScript" type="text/javascript"><!--
d=document;var a='';a+=';r='+escape(d.referrer)
js=10//--></script><script language="JavaScript1.1" type="text/javascript"><!--
a+=';j='+navigator.javaEnabled()
js=11//--></script><script language="JavaScript1.2" type="text/javascript"><!--
s=screen;a+=';s='+s.width+'*'+s.height
a+=';d='+(s.colorDepth?s.colorDepth:s.pixelDepth)
js=12//--></script><script language="JavaScript1.3" type="text/javascript"><!--
js=13//--></script><script language="JavaScript" type="text/javascript"><!--
d.write('<IMG src="http://db.c7.b3.a0.top.mail.ru/counter'+
'?id=228158;js='+js+a+';rand='+Math.random()+
'" height="1" width="1" alt="top.mail.ru" border="0" />')
if(11<js)d.write('<'+'!-- ')//--></script><img src="Android%20%20%D0%A1%D0%BE%D1%85%D1%80%D0%B0%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%BD%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B5%D0%BA_files/counter.gif" alt="top.mail.ru" border="0" height="1" width="1"><!-- <noscript><img
src="http://db.c7.b3.a0.top.mail.ru/counter?js=na;id=228158"
height="1" width="1" alt="top.mail.ru" border="0" /></noscript><script language="JavaScript" type="text/javascript"><!--
if(11<js)d.write('--'+'>')//--><!--/COUNTER--></noindex><ul class="nav nav-pills">
<li class=""><a href="http://rusnetframework.blogspot.com/">Блог</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/index.php">C#/Visual Basic</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/windowsphone/wp.php">Windows Phone</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/wpf/wpf.php">WPF</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/php">PHP</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/silverlight/silverlight.php">Silverlight</a></li>
<li class="active"><a href="http://developer.alexanderklimov.ru/android">Android</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/arduino">Arduino</a></li>
</ul>
<div class="container-fluid">
    
	<div class="row-fluid">
        <!--левое меню -->
		<div class="span2">
            <div class="well sidebar-nav">
            <ul class="nav nav-list">
<li class="active"><a href="http://developer.alexanderklimov.ru/android/index.php">Главная</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/android/theory.php">Теория</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/android/views.php">Palette</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/android/catshop/catshop.php">Котошоп</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/android/animation.php">Анимация</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/android/sqlite/">SQLite</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/android/opengles/">OpenGL ES</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/android/library.php">Библиотеки</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/android/games.php">Игры</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/android/emulator.php">Эмулятор</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/android/tips-android.php">Советы</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/android/articles-android.php">Статьи</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/android/books.php">Книги</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/android/java/java.php">Java. Экспресс-курс</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/android/design/">Дизайн</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/android/opensource.php">Open Source</a></li>
<li class=""><a href="http://developer.alexanderklimov.ru/android/links.php">Полезные ресурсы</a></li>
</ul>            </div><!--/.well -->
        </div><!--/span-->


        <div class="span8">

		<div class="row-fluid">
            <div class="span12">
			
			            <div id="myModal" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
            <div class="modal-header">
              <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
              <h3 id="myModalLabel">Читайте на здоровье!</h3>
            </div>
            <div class="modal-body">
            
              <p>Статья проплачена кошками - всемирно известными производителями котят.</p>

            <p>Если статья вам понравилась, то можете <a href="http://developer.alexanderklimov.ru/donate.php">поддержать проект</a>.</p>
			
			            
            </div>
            <div class="modal-footer">
              <button class="btn" data-dismiss="modal">Закрыть</button>
              
            </div>
          </div>            
<h1 class="text-warning">Сохранение настроек</h1>

<p>
<a href="#intro">Введение</a><br>
<a href="#save">Сохранение значений параметров</a><br>
<a href="#restore">Чтение значений параметров</a><br>
<a href="#stringset">Методы getStringSet() и putStringSet()</a><br>
<a href="#framework">Preferences Framework</a><br>
<a href="#checkboxpreference">CheckBoxPreference</a><br>
<a href="#edittextpreference">EditTextPreference</a><br>
<a href="#listpreference">ListPreference</a><br>
<a href="#ringtonepreference">RingtonePreference</a><br>
<a href="#preferencecategory">PreferenceCategory</a><br>
<a href="#preferencescreen">PreferenceScreen</a><br>
<a href="#savetosdcard">Сохранение настроек на SD-карту</a><br>
<a href="#import">Импорт системных настроек</a><br>
<a href="#dependency">Настройки с зависимостями</a><br>
<a href="#onsharedpreferencechangelistener">Отслеживание изменений в Общих настройках</a><br>
<a href="#firstvisit">Я у тебя первый?</a><br>
<a href="#rememberuser">Запомнить пользователя</a><br>
</p>

<h2 class="text-warning" id="intro">Введение</h2>

<p>Очень часто требуется сохранить настройки, управляющие поведением 
программы. Самый простой способ, который приходит в голову - сбросить 
данные в файл, а при запуске приложения считывать необходимые данные из 
файла. Второй вариант - работать с базой данных и хранить настройки там.
 Есть ещё способ хранения настроек в централизованном месте (вспомните 
рееестр Windows). Но в Android реестра нет, поэтому нам подходит первый 
вариант.</p>

<p>На самом деле нет необходимости изобретать свой велосипед и 
придумывать свою структуру для хранения данных. В Android существует 
класс <b>SharedPreferences</b>, разработанный специально для этих целей.</p>

<p>SharedPreferences обеспечивает лёгкий механизм для записи заранее 
известного набора значений при хранении состояния UI, пользовательских 
или программных настроек. Общие настройки позволяют сохранять данные в 
виде «ключ — значение», содержащие примитивные данные в виде именных 
настроек.</p>

<p>Общие настройки поддерживают базовые типы boolean, string, float, 
long и integer, что делает их идеальным средством для быстрого 
сохранения значений по умолчанию, переменных экземпляра класса, текущего
 состояния UI и пользовательских настроек. Они чаще всего используются 
для обеспечения постоянства данных между пользовательскими сессиями и 
доступа к ним компонентов приложения.</p>

<p>Настройка может быть доступна для единственной активности, а может 
быть общей для всех активностей приложения. Настройку возможно также 
сделать общей для нескольких приложений.</p>

<p>Для получения доступа к настройкам в коде приложения используются три метода:</p>

<ul>
<li><b>getPreferences()</b> — внутри активности, чтобы обратиться к определенному для активности предпочтению;</li>
<li><b>getSharedPreferences()</b> — внутри активности, чтобы обратиться к предпочтению на уровне приложения;</li>
<li><b>getDefaultSharedPreferences()</b> — из объекта PreferencesManager, чтобы получить общедоступную настройку, предоставляемую Android.</li>
</ul>

<p>Значения Общих настроек хранятся в контексте (Context) приложения. 
Это позволяет любому компоненту приложения, включая активности, сервисы 
и приёмники широковещательных намерений, получать доступ к значениям:</p>

<pre><code class="java">
Context context = getApplicationContext();
SharedPreferences prefs = 
        PreferenceManager.getDefaultSharedPreferences(context); 
// Получить значения можно с помощью методов get&lt;тип&gt;
</code></pre>

<p>Все эти методы возвращают экземпляр класса <b>SharedPreferences</b>, из которого можно получить соответствующую настройку с помощью ряда методов:</p>
<ul>
<li>getBoolean(String key, boolean defValue);</li>
<li>getFloat(String key, float defValue);</li>
<li>getInt(String key, int defValue);</li>
<li>getLong(String key, long defValue);</li>
<li>getString(String key, String defValue)</li>
</ul>

<p>Второй параметр в указанных методах — это значение по умолчанию, 
возвращаемое в том случае, когда нельзя получить выбранное значение. 
Например, чтобы получить значение для предпочтения с типом boolean 
используем следующий код:</p>

<pre><code class="java"> 
SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(this); 
boolean val = prefs.getBoolean(getString(R.string.pref_item), false));
</code></pre>

<p>Для любознательных могу добавить, что файлы, которые будут создаваться этим способом, хранятся в каталоге <b>/data/data/имя_пакета/shared_prefs/имя_файла_настроек.xml</b>.
 Поэтому в отладочных целях, если вам нужно сбросить настройки в 
эмуляторе, то при помощи перспективы DDMS, используя файловый менеджер, 
зайдите в нужную папку, удалите файл настроек и перезапустите эмулятор. 
На устройстве вы можете удалить программу и поставить ее заново.</p>

<p>Если открыть файл настроек текстовым редактором, то можно увидеть приблизительно такое:</p>

<pre><code class="xml">
&lt;?xml version='1.0' encoding='utf-8' standalone='yes' ?&gt;
&lt;map&gt;
&lt;string name="0005"&gt;|000000|000000|000000|0&lt;/string&gt;
&lt;string name="0004"&gt;|000000|000000|000000|1&lt;/string&gt;
&lt;string name="0006"&gt;|000000|000000|000000|0&lt;/string&gt;
&lt;/map&gt;
</code></pre>

<p>В данном случае в настройках хранятся только строковые значения.</p>

<h3 class="text-warning">Метод getPreferences() - Сохранение состояния активности</h3>

<p>Если вы хотите сохранить информацию, которая принадлежит активности и
 не должна быть доступна другим компонентам (например, переменным 
экземпляра класса), вы можете вызвать метод <b>Activity.getPreferences()</b>
 без указания названия Общих настроек. Доступ к возвращенному 
ассоциативному 
массиву Общих настроек ограничен активностью, из которой он был вызван. 
Каждая активность поддерживает только один безымянный объект Общих 
настроек.</p>

<pre><code class="java">
protected void saveActivityPreferences() {
    // Создайте или извлеките объект настроек активности.
    SharedPreferences activityPreferences = getPreferences(Activity.MODE_PRIVATE);
    // Извлеките редактор, чтобы изменить Общие настройки.
    SharedPreferences.Editor editor = activityPreferences.edit();
    // Извлеките представление.
    TextView myTextView = (TextView)findViewById(R.id.myTextView);
    // Запишите новые значения примитивных типов в объект Общих настроек.
    editor.putString("currentTextValue", myTextView.getText().toString());
    // Сохраните изменения.
    editor.commit();
}
</code></pre>

<h2 class="text-warning" id="save">Сохранение значений параметров</h2>

<p>Рассмотрим теперь практический пример. Для удобства создадим константу для имени файла настроек, например:</p>

<pre><code class="java">
public static final String APP_PREFERENCES = "mysettings"; // это будет именем файла настроек
</code></pre>

<p>Далее нужно создать параметры, которые вы хотите сохранять в настройках:</p>

<pre><code class="java">
public static final String APP_PREFERENCES_NAME = "Nickname";
public static final String APP_PREFERENCES_EMAIL = "Email";
public static final String APP_PREFERENCES_AGE = "Age";
</code></pre>

<p>Когда вы определили названия параметров, вы можете сохранять любые 
значения этих параметров. Для этого создаем переменную, представляющую 
экземпляр класса <b>SharedPreferences</b>:</p>

<pre><code class="java">
SharedPreferences mSettings;
</code></pre>

<p>Внутри метода onCreate() вы инициализируете эту переменную при помощи метода <b>getSharedPreferences()</b>:</p>

<pre><code class="java">
mSettings = getSharedPreferences(APP_PREFERENCES, Context.MODE_PRIVATE);
</code></pre>

<p>В этой строке вы передаете в указанный метод название вашего файла 
(он будет создан автоматически) и стандартное разрешение, используемое 
для закрытых файлов приложения.</p>

<p>Чтобы внести изменения в настройки (редактировать), нужно использовать класс <b>SharedPreferences.Editor</b>. Получить объект <b>Editor</b> можно через вызов метода <b>edit</b> объекта SharedPreferences, который вы хотите изменить. После того, как вы внесли все необходимые изменения, вызовите метод 
<b>commit()</b> объекта Editor, чтобы изменения вступили в силу.</p> 

<p>Предположим, что у нас есть текстовые поля, где пользователь должен 
ввести свои имя, электронную почту и возраст. Чтобы сохранить параметр, 
нужно получить текст, который ввел пользователь, через метод <b>getText().toString()</b>:</p>

<pre><code class="java">
EditText nicknameText (EditText)findViewById(R.id.editText_Nick);
String strNickName = nicknameText.getText().toString(); // здесь содержится текст, введенный в текстовом поле
</code></pre>

<p>Получив нужный текст, сохраняем его через метод <b>putString()</b> (есть также putLong(), putBoolean() и т.п.):</p>

<pre><code class="java">
Editor editor = mSettings.edit();
editor.putString(APP_PREFERENCES_NAME, strNickName);
editor.commit();
</code></pre>

<p>Как правило, параметры сохраняют в методах <b>onPause()</b> или <b>onStop()</b>.</p>

<h2 class="text-warning" id="restore">Чтение значений параметров</h2>

<p>Для считывания данных используют методы <b>onCreate()</b> или <b>onResume()</b>.
 Нам нужно получить доступ к настройкам программы и проверить, есть ли 
среди них нужный нам параметр. Нас интересует параметр Nickname. Если мы
 его найдём, то загрузим его значение в текстовое поле.</p>

<pre><code class="java">
if(mSettings.contains(APP_PREFERENCES_NAME)) {
    nicknameText.setText(mSettings.getString(APP_PREFERENCES_NAME, ""));
}
</code></pre>

<p>В этих строчках кода мы проверили существование параметра <b>APP_PREFERENCES_NAME</b> и получили его значение через <b>getString()</b>,
 передавая ключ и значение по умолчанию (используется в том случае, если
 для данного ключа пока что не сохранено никакое значение). Осталось 
только загрузить полученный результат в текстовое поле.</p>

<p>Аналогично поступаем и с другими параметрами через методы get&lt;тип&gt;() (это вам в качестве домашнего задания).</p>

<h2 class="text-warning">Очистка значений</h2>

<p>Для очистки значений используйте методы <b>SharedPreferences.Editor remove(String key)</b> и <b>SharedPreferences.Editor clear()</b>.</p>

<h2 class="text-warning" id="stringset">Методы getStringSet() и putStringSet()</h2>

<p>Начиная с API 11, у класса <b>SharedPreferences</b> появился новый метод <b>getStringSet()</b>, а у класса <b>SharedPreferences.Editor</b> родственный ему метод <b>putStringSet()</b>.
 Данные метода позволяет работать с наборами строк, что бывает удобно 
при большом количестве настроек, которые нужно сразу записать или 
считать.</p>

<pre><code class="java">
SharedPreferences sp;
String catnames;

// записываем имена котов в файл настроек
public void onPutSettings(View v){
	Set&lt;String&gt; catnames = new HashSet&lt;String&gt;();
	catnames.add("Мурзик");
	catnames.add("Барсик");
	catnames.add("Рыжик");
	Editor e = sp.edit();
	e.putStringSet("strSetKey", catnames);
	e.commit();
}

// считываем имена котов обратно
public void onShowSettings(View v)
{
 	Set&lt;String&gt; ret = sp.getStringSet("strSetKey", new HashSet&lt;String&gt;());
	for(String r : ret) {
	    Log.i("Share", "Имя кота: " + r);
	}
}
</code></pre>


<h2 class="text-warning">Удаление файла</h2>

<p>Как я уже сказал, файл настроек хранится в <b>/data/data/имя_пакета/shared_prefs/имя_файла_настроек.xml</b>. Вы можете удалить его программно, например так:</p>

<pre><code class="java">
File file= new File("/data/data/.../shared_prefs/вашфайл.xml")
file.delete();
</code></pre>

<p>Учтите, что данные могут оставаться в памяти и временном файле *.bak.
 Поэтому, даже после удаления файла, он может заново воссоздаться. 
Вообще удалять файл не рекомендуется. Он автоматически удалится при 
удалении самой программы.</p>

<h2 class="text-warning" id="framework">Preferences Framework</h2>

<p>В предыдущих примерах мы просто сохраняли и восстанавливали нужные 
параметры. Часто для этих целей в приложениях используют отдельный экран
 с настройками. Безусловно вы можете создать собственный xml-файл 
разметки и разместить там нужные элементы управления. Но Android для 
этих целей предоставляет собственный Preferences Framework, с помощью 
которого можно создавать индивидуальный набор предпочтений и встраивать 
их в приложения.</p>

<p>Кроме того фреймворк настроек позволяет прослушивать изменения в Общих настройках через реализацию метода <b>onSharedPreferenceChangeListener</b>.</p>

<p>Данный подход позволяет быстро создать окно настроек практически без 
написания кода. Предпочтения — это отдельная активность в приложении, 
вызываемая из активности. Сама активность расширяется от класса 
PreferenceActivity, а не от стандартного класса Activity. Предпочтения 
определяются в отдельном XML-файле, где корневым элементом является 
элемент &lt;PreferenceScreen&gt;, который представляет собой контейнер 
для предпочтений и может содержать дочерние элементы 
&lt;PreferenceScreen&gt;. Элемент &lt;PreferenceCategory&gt; также 
является контейнерным элементом и предназначен для объединения 
предпочтений в группы.</p> 

<p>Для сохранения предпочтений используется четыре класса:</p>
<ul>
<li><a href="#checkboxpreference">CheckBoxPreference</a></li>
<li><a href="#edittextpreference">EditTextPreference</a></li>
<li><a href="#listpreference">ListPreference</a></li>
<li><a href="#ringtonepreference">RingtonePreference</a></li>
</ul>

<h2 class="text-warning" id="checkboxpreference">CheckBoxPreference</h2>

<p>Для начала необходимо создать в папке <b>res/xml/</b> XML-файл ресурсов, например, <b>settings.xml</b>. При создании файла в диалоговом окне установите переключатель на <b>Preference</b> и убедитесь, что корневым элементом файла установлен <b>PreferenceScreen</b>:</p>

<p><img src="Android%20%20%D0%A1%D0%BE%D1%85%D1%80%D0%B0%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%BD%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B5%D0%BA_files/preference4.png" title="" alt="" height="658" width="702"></p>

<p>Далее устанавливаем настройки.</p>

<pre><code class="xml">
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;PreferenceScreen xmlns:android="http://schemas.android.com/apk/res/android"&gt;
    &lt;CheckBoxPreference
        android:key="wifi"
        android:title="@string/wifi_title"
        android:summary="@string/wifi_summary"
        android:defaultValue="true" /&gt;
  &lt;CheckBoxPreference
        android:key="hints"
        android:title="@string/hints_title"
        android:summary="@string/hints_summary"
        android:defaultValue="true" /&gt;
&lt;/PreferenceScreen&gt;
</code></pre>

<p>Мы определили две настройки для программы: включение и выключение 
Wi-Fi и показ подсказок. В нашем случае мы выводим флажки (элемент <b>CheckBoxPreference</b>), которые по умолчанию будут отмечены (атрибут <b>android:defaultValue</b>).</p>

<p>Не забываем добавить новые строковые ресурсы в файл strings.xml:</p>

<pre><code class="xml">
&lt;string name="wifi_title"&gt;Wi-Fi&lt;/string&gt;
&lt;string name="wifi_summary"&gt;Вкл. или выкл. сеть WiFi&lt;/string&gt;
&lt;string name="hints_title"&gt;Подсказки&lt;/string&gt;
&lt;string name="hints_summary"&gt;Показывать подсказки&lt;/string&gt;
</code></pre>

<p>Далее создаем новый класс <b>Prefs</b>, который будет наследоваться от класса <b>PreferenceActivity</b>:</p>

<pre><code class="java">
package ru.alexanderklimov.preferencedemo

import android.os.Bundle;
import android.preference.PreferenceActivity;

public class Prefs extends PreferenceActivity 
{
	@Override
	protected void onCreate(Bundle savedInstanceState) 
	{
	    super.onCreate(savedInstanceState);
	    addPreferencesFromResource(R.xml.settings);
	}
}
</code></pre>

<p>Метод <b>addPreferencesFromResource()</b> считывает установленные 
настройки из XML-файла, где хранятся наши ресурсы, и делает их 
доступными для программы. В результате мы должны увидеть настройки на 
экране. Не забываем зарегистрировать новый Activity в манифесте 
AndroidManifest.xml:</p>

<pre><code class="xml">
&lt;activity 
    android:name=".Prefs"
    android:label="@string/settings_title"&gt;
&lt;/activity&gt;
</code></pre>

<p>Напишем метод для вывода окна настроек, который можно повесить на щелчок мыши или пункта меню:</p>

<pre><code class="java">
public void showSettings()
{
	Intent i = new Intent(this, Prefs.class);
	startActivity(i);
}
</code></pre>

<p>Запустите программу и вызовите окно настроек. Попробуйте снять или 
установить флажки в разных сочетаниях. Затем закройте приложение и снова
 запустите его. Если вы откроете окно настроек, то увидите, что 
сделанные вами изменения, сохранены. Система сама делает за нас всю 
работу и запоминает установленные настройки. Что при этом происходит за 
кулисами программы и как хранятся данные на устройсте - тема отдельного 
разговора.</p>

<p><img src="Android%20%20%D0%A1%D0%BE%D1%85%D1%80%D0%B0%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%BD%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B5%D0%BA_files/preference5.png" alt="CheckBoxPreference"></p>

<p>Наверное, вы обратили внимание, что метод <b>addPreferencesFromResource()</b>
 был зачёркнут и помечен, как устаревший (если вы создавали проект для 
Android 3 и выше). В новых версиях Android следует использовать фрагмент
 <b>PreferenceFragment</b>, о котором поговорим в другой раз.</p>

<h2 class="text-warning" id="edittextpreference">EditTextPreference</h2>

<p>Мы научились сохранять настройки при помощи флажков. Существует также
 возможность сохранения настроек в текстовом виде при помощи <b>EditTextPreference</b>.
 Подобный способ настройки позволяет сохранять текст, вводимый 
пользователем. Давайте реализуем эту возможность в нашем текстовом 
редакторе - добавим возможность устанавливать размер шрифта для текста. 
Откроем снова файл <b>settings.xml</b> и добавим новый элемент <b>EditTextPreference</b>:</p>

<pre><code class="xml">
&lt;EditTextPreference
    android:key="@string/pref_size"
    android:title="Размер шрифта"
    android:summary="Устанавливает новый размер шрифта"
    android:defaultValue="14"
    android:dialogTitle="Введите размер шрифта (от 10 до 32)" /&gt;
</code></pre>

<p>Запустите проект и вызовите окно настроек. Теперь у нас появилась 
опция установки размера шрифта с треугольником (для старых версий 
Android). Если щёлкнуть на треугольнике, то откроется новое диалоговое 
окно с текстовым полем ввода.</p>

<p><img src="Android%20%20%D0%A1%D0%BE%D1%85%D1%80%D0%B0%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%BD%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B5%D0%BA_files/texteditor3.htm" alt="Настройки" height="400" width="240"></p>

<p><img src="Android%20%20%D0%A1%D0%BE%D1%85%D1%80%D0%B0%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%BD%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B5%D0%BA_files/texteditor4.png" alt="Настройки" height="400" width="240"></p>

<p>В Android 4 я не увидел никаких треугольников и догадаться, что можно
 коснуться экрана для вызова другого экрана, практически невозможно. Кто
 придумал такой интерфейс?</p>

<p><img src="Android%20%20%D0%A1%D0%BE%D1%85%D1%80%D0%B0%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%BD%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B5%D0%BA_files/preference6.png" alt=""> <img src="Android%20%20%D0%A1%D0%BE%D1%85%D1%80%D0%B0%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%BD%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B5%D0%BA_files/preference7.png" alt=""></p>

<p>В <a href="http://developer.alexanderklimov.ru/android/texteditor.php">следующем уроке</a> мы разберём, как считывать установленные значения размера шрифта.</p>

<h2 class="text-warning" id="listpreference">ListPreference</h2>

<p>Также можно использовать списки для хранения настроек. Для этой цели 
используется диалоговое окно ListPreference. Необходимо заранее 
подготовить строковый ресурс для заголовка и массив строк для самого 
списка значений. Индекс выбранной строки списка будет задавать нужное 
значение для сохранения в SharedPreferences.</p>

<p>Продолжим работу с текстовым редактором и добавим в него список для 
выбора стиля текста. В списке будет четыре опции: Обычный, Полужирный, 
Курсив, Полужирный+Курсив.</p>

<p>Подготовим массив строк и сохраним его в файле <b>arrays.xml</b>, который необходимо поместить в каталог <b>res/values/</b>.</p>

<pre><code class="xml">
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;resources&gt;
	&lt;string-array name="text_style"&gt;
		&lt;item&gt;Обычный&lt;/item&gt;
		&lt;item&gt;Полужирный&lt;/item&gt;
		&lt;item&gt;Курсив&lt;/item&gt;
		&lt;item&gt;Полужирный+Курсив&lt;/item&gt;
	&lt;/string-array&gt;
&lt;/resources&gt;
</code></pre>

<p>В файл настроек (settings.xml) добавим дополнительный элемент 
&lt;ListPreference&gt;, в котором определим атрибуты заголовка окна, 
привязку к массиву значений и значение по умолчанию:</p>

<pre><code class="xml">
&lt;ListPreference
	android:key="@string/pref_style"
	android:title="Стиль для шрифта"
	android:summary="Устанавливает стиль для шрифта"
	android:defaultValue="1"
	android:entries="@array/text_style"
	android:entryValues="@array/text_style"
	android:dialogTitle="Выберите стиль для шрифта" /&gt;
</code></pre>

<p>Код для чтения настроек из списка рассматривается в  <a href="http://developer.alexanderklimov.ru/android/texteditor.php">следующем уроке</a>.</p>

<p>Запустив проект, вы теперь увидите новую настройку <b>Стиль для шрифта</b>,
 которая открывает диалоговое окно для выбора стиля из списка. Обратите 
внимание, что в диалоговом окне нет кнопки сохранения, только <b>Отмена</b>. Изменения сохраняются сразу при выборе опции списка.</p>

<p>Для сравнения я оставил скриншоты от старой версии Android 2.3 и Android 4.0</p>

<p><img src="Android%20%20%D0%A1%D0%BE%D1%85%D1%80%D0%B0%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%BD%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B5%D0%BA_files/texteditor5.png" alt="Настройки" height="400" width="240">

<img src="Android%20%20%D0%A1%D0%BE%D1%85%D1%80%D0%B0%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%BD%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B5%D0%BA_files/texteditor6.png" alt="Настройки" height="400" width="240"></p>

<p><img src="Android%20%20%D0%A1%D0%BE%D1%85%D1%80%D0%B0%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%BD%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B5%D0%BA_files/preference8.png" alt="Настройки"> <img src="Android%20%20%D0%A1%D0%BE%D1%85%D1%80%D0%B0%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%BD%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B5%D0%BA_files/preference9.png" alt="Настройки"></p>


<h2 class="text-warning" id="ringtonepreference">RingtonePreference</h2>

<p>Рассмотрим работу с настройкой, связанной с установкой мелодии для звонка. Предпочтение <b>&lt;RingtonePreference&gt;</b>
 предоставляет диалоговое окно выбора мелодии звонка со списком опций. 
Список в диалоговом окне отображает мелодии для звонка, уведомлений, 
тонового набора, доступные на мобильном устройстве. Также предусмотрена 
возможность добавления дополнительной опции Silent (Тихий режим) - 
добавьте атрибут <b>android:showSilent="true"</b>.</p>

<p>Создадим файл настроек preferences.xml:</p>

<pre><code class="xml">
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;PreferenceScreen
	xmlns:android="http://schemas.android.com/apk/res/android"&gt;

	&lt;RingtonePreference
		android:key="@string/setting_ringtone"
		android:title="@string/setting_ringtone"
		android:showDefault="true"
		android:showSilent="true"
		android:summary="Устанавливает мелодию для звонка (вкл. или выкл.)" /&gt; 	
&lt;/PreferenceScreen&gt;
</code></pre>

<p>Код для запуска окна настроек</p>

<pre><code class="java">
Intent intent = new Intent(); 
intent.setClass(this, Prefs.class); 
startActivity(intent); 
</code></pre>

<p><img src="Android%20%20%D0%A1%D0%BE%D1%85%D1%80%D0%B0%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%BD%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B5%D0%BA_files/ringtone1.png" alt="Настройки">

<img src="Android%20%20%D0%A1%D0%BE%D1%85%D1%80%D0%B0%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%BD%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B5%D0%BA_files/ringtone2.png" alt="Настройки"></p>

<h2 class="text-warning" id="preferencecategory">PreferenceCategory</h2>

<p>Если в приложении используется слишком много настроек разного типа, 
то можно сгруппировать их по категориям, чтобы улучшить внешний вид окна
 настроек. Для этого в Preferences Framework есть специальный элемент <b>PreferenceCategory</b>.</p>

<p>Еще раз вернёмся к статье <a href="http://developer.alexanderklimov.ru/android/texteditor.php">Создание простого текстового редактора</a>,
 где использовались настройки для открытия файла и для работы с текстом 
(Размер шрифта и стиль шрифта). Почему бы нам не разбить настройки на 
две категории: к первой категории мы отнесем настройку открытия файла, а
 ко второй две настройки, связанные с шрифтами.</p>

<p>Категории добавляются через элемент <b>&lt;PreferenceCategory&gt;</b>  под корневым элементом &lt;PreferenceScreen&gt;, и в него уже помещаются нужные настройки:</p>

<pre><code class="xml">
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;PreferenceScreen
	xmlns:android="http://schemas.android.com/apk/res/android"&gt;
	&lt;PreferenceCategory
		android:title="Работа с файлами"&gt;
		&lt;CheckBoxPreference
			android:key="@string/pref_openmode"
			android:title="Открыть файл"
			android:summary="Открывать файл при запуске приложения" /&gt;
	&lt;/PreferenceCategory&gt;

	&lt;PreferenceCategory
		android:title="Настройки шрифта"&gt;
		&lt;EditTextPreference
			android:key="@string/pref_size"
			android:title="Размер шрифта"
			android:summary="Устанавливает новый размер шрифта"
			android:defaultValue="14"
			android:dialogTitle="Введите размер шрифта (от 10 до 32)" /&gt;

		&lt;ListPreference
			android:key="@string/pref_style"
			android:title="Стиль для шрифта"
			android:summary="Устанавливает стиль для шрифта"
			android:defaultValue="1"
			android:entries="@array/text_style"
			android:entryValues="@array/text_style"
			android:dialogTitle="Выберите стиль для шрифта" /&gt;
	&lt;/PreferenceCategory&gt;
&lt;/PreferenceScreen&gt;
</code></pre>

<p>Если вы запустите приложение для текстового редактора с добавленными 
категориями, то увидите дополнительную полоску с текстом. Сравните два 
рисунка до и после добавления элемента PreferenceCategory:</p>

<p>
<img src="Android%20%20%D0%A1%D0%BE%D1%85%D1%80%D0%B0%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%BD%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B5%D0%BA_files/texteditor5.png" alt=""> <img src="Android%20%20%D0%A1%D0%BE%D1%85%D1%80%D0%B0%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%BD%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B5%D0%BA_files/preferencecategory.png">
</p>

<h2 class="text-warning" id="preferencescreen">PreferenceScreen</h2>

<p>Кроме корневого элемента &lt;PreferenceScreen&gt; в файле настроек 
можно использовать вложенные дочерние элементы &lt;PreferenceScreen&gt;,
 которые будут отображаться в отдельном окне. Родительский экран 
&lt;PreferenceScreen&gt; в этом случае будет отображать вход для запуска
 дочернего экрана настроек. Продолжим опыты над текстовым редактором и 
добавим еще одну настройку, управляющую цветом (выделено жирным).</p>

<pre><code class="xml">
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;PreferenceScreen
	xmlns:android="http://schemas.android.com/apk/res/android"&gt;
	&lt;PreferenceCategory
		android:title="Работа с файлами"&gt;
		&lt;CheckBoxPreference
			android:key="@string/pref_openmode"
			android:title="Открыть файл"
			android:summary="Открывать файл при запуске приложения" /&gt;
	&lt;/PreferenceCategory&gt;

	&lt;PreferenceCategory
		android:title="Настройки шрифта"&gt;

		&lt;EditTextPreference
			android:key="@string/pref_size"
			android:title="Размер шрифта"
			android:summary="Устанавливает новый размер шрифта"
			android:defaultValue="14"
			android:dialogTitle="Введите размер шрифта (от 10 до 32)" /&gt;

		&lt;ListPreference
			android:key="@string/pref_style"
			android:title="Стиль для шрифта"
			android:summary="Устанавливает стиль для шрифта"
			android:defaultValue="1"
			android:entries="@array/text_style"
			android:entryValues="@array/text_style"
			android:dialogTitle="Выберите стиль для шрифта" /&gt;
		<b>	
		&lt;PreferenceScreen
			android:key="@string/pref_color"
			android:title="Цвет текста"
			android:summary="Устанавливает цвет для текста"&gt;

			&lt;CheckBoxPreference
				android:key="@string/pref_color_black"
				android:title="Черный"
				android:defaultValue="true"
				android:summary="Устанавливает черный цвет" /&gt;
			&lt;CheckBoxPreference
				android:key="@string/pref_color_red"
				android:title="Красный"
				android:summary="Устанавливает красный цвет" /&gt;
			&lt;CheckBoxPreference
				android:key="@string/pref_color_green"
				android:title="Зеленый"
				android:summary="Устанавливает зеленый цвет" /&gt;
			&lt;CheckBoxPreference
				android:key="@string/pref_color_blue"
				android:title="Синий"
				android:summary="Устанавливает синий цвет" /&gt;
		&lt;/PreferenceScreen&gt;
		</b>
	&lt;/PreferenceCategory&gt;
&lt;/PreferenceScreen&gt;
</code></pre> 

<p>Запустив приложение, вы увидите новую настройку <b>Цвет текста</b>, которая открывает новое окно для выбора цвета текста.</p>

<p>
<img src="Android%20%20%D0%A1%D0%BE%D1%85%D1%80%D0%B0%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%BD%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B5%D0%BA_files/preference1.png" alt=""> <img src="Android%20%20%D0%A1%D0%BE%D1%85%D1%80%D0%B0%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%BD%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B5%D0%BA_files/preference2.png" alt="">
</p>

<p>Вам остается только написать код для обработки выбора пользователя, 
чтобы вывести текст в текстовом редакторе в нужном цвете. Обратите 
внимание, что в нашем примере используются флажки, которые позволяют 
создавать комбинации различных цветов. Например, сочетание красного и 
синего цвета дают красивый цвет, который понравится известному дизайнеру
 Артемию Лебедеву.</p>

<p><img src="Android%20%20%D0%A1%D0%BE%D1%85%D1%80%D0%B0%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%BD%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B5%D0%BA_files/preference3.png" alt=""></p>

<p>Исходный код для текстового редактора смотрите <a href="http://rusproject.narod.ru/android/texteditor.htm">здесь</a>

</p><h2 class="text-warning" id="savetosdcard">Сохранение настроек на SD-карту</h2>

<p>Сам файл с настройками хранится в системе и обычному пользователю он 
не виден. Если вам понадобится получить все значения, хранимые в 
настройках, то вы можете считать все данные при помощи метода <b>getAll()</b> и записать их в файл, который можно сохранить на SD-карте:</p>

<pre><code class="java">
private void saveSharedPreferences()
{
    // создадим для примера несколько строчек с настройками. Вы можете пропустить этот код
    SharedPreferences prefs = getSharedPreferences("MyPrefs", MODE_PRIVATE);
    SharedPreferences.Editor prefEdit = prefs.edit();
    prefEdit.putBoolean("SomeBooleanValue_True", true);
    prefEdit.putInt("SomeIntValue_100", 100);
    prefEdit.putFloat("SomeFloatValue_1.11", 1.11f);
    prefEdit.putString("SomeStringValue_Unicorns", "Unicorns");
    prefEdit.commit();

    // Теперь сам пример
    File myPath = new File(Environment.getExternalStorageDirectory().toString());
    File myFile = new File(myPath, "MySharedPreferences");

    try
    {
        FileWriter fw = new FileWriter(myFile);
        PrintWriter pw = new PrintWriter(fw);

        Map&lt;String,?&gt; prefsMap = prefs.getAll();

        for(Map.Entry&lt;String,?&gt; entry : prefsMap.entrySet())
        {
            pw.println(entry.getKey() + ": " + entry.getValue().toString());            
        }

        pw.close();
        fw.close();
    }
    catch (Exception e)
    {
        // what a terrible failure...
        Log.wtf(getClass().getName(), e.toString());
    }
}
</code></pre>

<h2 class="text-warning" id="import">Импорт системных настроек</h2>

<p>У фреймворка настроек есть интересная особенность - можно внедрить в 
экран настроек вашего приложения вызов системных настроек. Делается это 
следующим образом. В файл настроек добавляем новых блок, например, 
такой:</p>

<pre><code class="xml">
&lt;PreferenceScreen
    android:summary="Импортированная системная настройка"
    android:title="Настройка через намерение" &gt;
    &lt;intent android:action="android.settings.AIRPLANE_MODE_SETTINGS" /&gt;
&lt;/PreferenceScreen&gt;
</code></pre>

<p>Класс <b>android.provider.Settings</b> включает множество констант типа <b>android.settings.*</b>,
 которые можно использовать для вызова экранов системных настроек. Я 
выбрал настройку Автономного режима, также можно было вызвать настройку 
Экрана (<b>android.settings.DISPLAY_SETTINGS</b>). Далее нужно добавить фильтр намерений в запись манифеста:</p>

<pre><code class="xml">
&lt;activity android:name="Prefs" &gt;
    &lt;intent-filter&gt;
        &lt;action android:name="ru.alexanderklimov.preferences.ACTION_USER_PREFERENCE" /&gt;
    &lt;/intent-filter&gt;
&lt;/activity&gt;
</code></pre>

<p>При использовании данного способа система интерпретирует это как запрос на вызов метода <b>startActivity()</b> с указанным действием. Это очень удобно, когда из вашего экрана настроек нужно вызвать стандартную системную настройку.</p>

<h2 class="text-warning" id="dependency">Настройки с зависимостями</h2>

<p>Иногда требуется, чтобы часть настроек была связана с определённой 
родительской настройкой. И если родительская настройки заблокирована, то
 есть смысл автоматически заблокировать и дочерние настройки. Для этой 
цели применяется атрибут <b>android:dependency</b>.</p>

<pre><code class="xml">
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;PreferenceScreen xmlns:android="http://schemas.android.com/apk/res/android"&gt;
    &lt;CheckBoxPreference
        android:key="cat_key"
        android:title="У вас есть кот?"
        android:summary="Доступно для владельцев котов"
        android:defaultValue="true" /&gt;
  &lt;EditTextPreference
        android:key="catfood"
        android:title="Подарки для кота"
        android:summary="Угости кота"
        android:dependency="cat_key" /&gt;
&lt;/PreferenceScreen&gt;
</code></pre>

<p>Мы указали, что текстовое поле зависит от родительского флажка. Запустим и сравним поведение в двух разных случаях.</p>

<p><img src="Android%20%20%D0%A1%D0%BE%D1%85%D1%80%D0%B0%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%BD%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B5%D0%BA_files/preference10.png" alt="Зависимости в настройках"> <img src="Android%20%20%D0%A1%D0%BE%D1%85%D1%80%D0%B0%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%BD%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B5%D0%BA_files/preference11.png" alt="Зависимости в настройках"></p>

<h2 class="text-warning" id="onsharedpreferencechangelistener">Отслеживание изменений в Общих настройках</h2>

<p>Как уже упоминалось, класс <b>onSharedPreferenceChangeListener</b> 
позволяет вызвать callback-метод в момент добавления, удаления или 
изменения конкретной Общей настройки. Используя этот обработчик, 
компоненты вашего приложения могут следить за изменениями в настройках, 
установленных пользователем, и обновлять пользовательский интерфейс или 
корректировать поведение программы.</p>

<p>Зарегистрируйте обработчик onSharedPreferenceChangeListener, применив
 Общие настройки, за которыми вы хотите следить. Реализация 
onSharedPreferenceChanged показана ниже (каркас):</p>

<pre><code class="java">
public class MyActivity extends Activity implements OnSharedPreferenceChangeListener {
    @Override
    public void onCreate(Bundle SavedInstanceState) {
        // Регистрируем этот OnSharedPreferenceChangeListener
        Context context = getApplicationContext();
        SharedPreferences prefs =
            PreferenceManager.getDefaultSharedPreferences(context);
        prefs.registerOnSharedPreferenceChangeListener(this);
    }
    
	public void onSharedPreferenceChanged(SharedPreferences prefs, String key) {
        // TODO Проверять общие настройки, ключевые параметры и изменять UI 
        // или поведение приложения, если потребуется.
    }
}
</code></pre>

<h2 class="text-warning" id="firstvisit">Я у тебя первый?</h2>

<p>Предположим, вы хотите выводить пользователю какую-то информацию при 
первом запуске приложения (краткую инструкцию, заставку и т.п.).</p>

<pre><code class="java">
public class SharedPreferencesExample extends Activity {
    private static final String MY_SETTINGS = "my_settings";
	
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);
		
        SharedPreferences sp = getSharedPreferences(MY_SETTINGS, 
                Context.MODE_PRIVATE);
        // проверяем, первый ли раз открывается программа
        boolean hasVisited = sp.getBoolean("hasVisited", false);
		
        if (!hasVisited) {
            // выводим нужную активность
            Editor e = sp.edit();
            e.putBoolean("hasVisited", true);
            e.commit(); // не забудьте подтвердить изменения
        }
    }
}
</code></pre>

<h2 class="text-warning" id="rememberuser">Запомнить пользователя</h2>

<p>Иногда требуется запомнить имя пользователя или другие данные 
(пин-код, номер телефона и т.д.). В этом случае вам также подойдут 
предпочтения, когда вы просто сохраняете нужную строку из текстового 
поля:</p>

<pre><code class="java">
EditText userNameLogin = (EditText) findViewById(R.id.login_editText);
String userName = userNameLogin.getText().toString();
Editor e = sp.edit();
e.putString("userName", userName);
e.commit();
</code></pre>

<h5 class="text-error">Реклама</h5>

<script type="text/javascript"><!--
google_ad_client = "ca-pub-4224968932772057";
/* Полноразмерный баннер 728х90 */
google_ad_slot = "4077523505";
google_ad_width = 728;
google_ad_height = 90;
//-->
</script>
<script type="text/javascript" src="Android%20%20%D0%A1%D0%BE%D1%85%D1%80%D0%B0%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%BD%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B5%D0%BA_files/show_ads.js">
</script>

 </div><!--/span-->
        </div><!--/row-->	
		  
        </div><!--/span-->
		
		<div class="span2">
            <div class="well sidebar-nav">
    <h4><span class="label label-info">Реклама</span></h4>
    <script type="text/javascript"><!--
    google_ad_client = "pub-4224968932772057";
    /* 120x600AlexKlimov */
    google_ad_slot = "0305552138";
    google_ad_width = 120;
    google_ad_height = 600;
    //-->
    </script>
    <script type="text/javascript" src="Android%20%20%D0%A1%D0%BE%D1%85%D1%80%D0%B0%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%BD%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B5%D0%BA_files/show_ads.js">
    </script>
</div><!--/.well -->        </div><!--/span-->
		
      </div><!--/row-->
	  
	
      <hr>
	  
	  	  <div class="row-fluid">
	  <div class="span12">
	  <img src="Android%20%20%D0%A1%D0%BE%D1%85%D1%80%D0%B0%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%BD%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B5%D0%BA_files/cat_bottom.png" align="right">
</div><!--/span-->
        </div><!--/row-->

<footer>
    <noindex>
    <span style="float:left; margin:3px 1px 1px 2px;">
	    © 2013 <a href="mailto:rusproject@mail.ru">А.Климов</a>
		
		<!-- Place this code where you want the badge to render. -->
<a href="http://plus.google.com/109061106977829925124?prsrc=3" rel="publisher" style="text-decoration:none;">
<img src="Android%20%20%D0%A1%D0%BE%D1%85%D1%80%D0%B0%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%BD%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B5%D0%BA_files/gplus-16.png" alt="Google+" style="border:0;width:16px;height:16px;"></a>

    </span>
	
		<span style="float: right; margin:3px 5px 1px 1px; font-size:22px;">
        <!--Rating@Mail.ru LOGO--><a target="_top" href="http://top.mail.ru/jump?from=228158"><img src="Android%20%20%D0%A1%D0%BE%D1%85%D1%80%D0%B0%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%BD%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B5%D0%BA_files/counter_002.gif" alt="Рейтинг@Mail.ru" border="0" height="31" width="88"></a><!--/LOGO-->
	</span>
    
    <span style="float: right; margin:2px 70px 1px 1px; font-size:22px;">
        <a href="http://feeds.feedburner.com/alexanderklimov/VJcl"><img src="Android%20%20%D0%A1%D0%BE%D1%85%D1%80%D0%B0%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%BD%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B5%D0%BA_files/VJcl.gif" style="border:0" alt="" height="26" width="88"></a>
	</span>
	
<div style="float: right; margin:2px 70px 1px 1px;">
<!-- Place this tag where you want the +1 button to render. -->
<div id="___plusone_0" style="text-indent: 0px; margin: 0px; padding: 0px; background: none repeat scroll 0% 0% transparent; border-style: none; float: none; line-height: normal; font-size: 1px; vertical-align: baseline; display: inline-block; width: 300px; height: 15px;"><iframe title="+1" data-gapiattached="true" src="Android%20%20%D0%A1%D0%BE%D1%85%D1%80%D0%B0%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%BD%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B5%D0%BA_files/fastbutton.htm" name="I0_1378011276602" id="I0_1378011276602" vspace="0" tabindex="0" style="position: static; top: 0px; width: 300px; margin: 0px; border-style: none; left: 0px; visibility: visible; height: 15px;" marginwidth="0" marginheight="0" hspace="0" frameborder="0" scrolling="no" width="100%"></iframe></div>

</div>

<!-- Place this tag after the last +1 button tag. -->
<script type="text/javascript">
  window.___gcfg = {lang: 'ru'};

  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>
	

    </noindex>
</footer>

</div><!--/.fluid-container-->
    <!-- Le javascript
    ================================================== -->
    <!-- Placed at the end of the document so the pages load faster -->
    <script src="Android%20%20%D0%A1%D0%BE%D1%85%D1%80%D0%B0%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%BD%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B5%D0%BA_files/jquery.js"></script><iframe style="width: 1px; height: 1px; position: absolute; left: -100px;" src="Android%20%20%D0%A1%D0%BE%D1%85%D1%80%D0%B0%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%BD%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B5%D0%BA_files/postmessageRelay.htm" id="oauth2relay600663225" name="oauth2relay600663225"></iframe>
    <script src="Android%20%20%D0%A1%D0%BE%D1%85%D1%80%D0%B0%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%BD%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B5%D0%BA_files/bootstrap-transition.js"></script>
    <script src="Android%20%20%D0%A1%D0%BE%D1%85%D1%80%D0%B0%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%BD%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B5%D0%BA_files/bootstrap-alert.js"></script>
    <script src="Android%20%20%D0%A1%D0%BE%D1%85%D1%80%D0%B0%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%BD%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B5%D0%BA_files/bootstrap-modal.js"></script>
    <script src="Android%20%20%D0%A1%D0%BE%D1%85%D1%80%D0%B0%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%BD%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B5%D0%BA_files/bootstrap-dropdown.js"></script>
    <script src="Android%20%20%D0%A1%D0%BE%D1%85%D1%80%D0%B0%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%BD%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B5%D0%BA_files/bootstrap-scrollspy.js"></script>
    <script src="Android%20%20%D0%A1%D0%BE%D1%85%D1%80%D0%B0%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%BD%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B5%D0%BA_files/bootstrap-tab.js"></script>
    <script src="Android%20%20%D0%A1%D0%BE%D1%85%D1%80%D0%B0%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%BD%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B5%D0%BA_files/bootstrap-tooltip.js"></script>
    <script src="Android%20%20%D0%A1%D0%BE%D1%85%D1%80%D0%B0%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%BD%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B5%D0%BA_files/bootstrap-popover.js"></script>
    <script src="Android%20%20%D0%A1%D0%BE%D1%85%D1%80%D0%B0%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%BD%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B5%D0%BA_files/bootstrap-button.js"></script>
    <script src="Android%20%20%D0%A1%D0%BE%D1%85%D1%80%D0%B0%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%BD%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B5%D0%BA_files/bootstrap-collapse.js"></script>
    <script src="Android%20%20%D0%A1%D0%BE%D1%85%D1%80%D0%B0%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%BD%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B5%D0%BA_files/bootstrap-carousel.js"></script>
    <script src="Android%20%20%D0%A1%D0%BE%D1%85%D1%80%D0%B0%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%BD%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B5%D0%BA_files/bootstrap-typeahead.js"></script>

</body></html>